/*
 * Prospect Roleplay (c) 2018-2019
 * Developed by Shady
 * Purpose: Public & stock functions
 */

#include <YSI\y_hooks>

// PUBLIC FUNCTIONS //
Server:SaveSQLInt(sqlid, table[], row[], value)
{
	new query[512];
	mysql_format(sqlConnection, query, sizeof(query), "UPDATE %e SET %e = %i WHERE id = %i", table, row, value, sqlid);
	mysql_pquery(sqlConnection, query);
	return true;
}

Server:SaveSQLFloat(sqlid, table[], row[], Float:value)
{
	new query[512];
	mysql_format(sqlConnection, query, sizeof(query), "UPDATE %e SET %e = %f WHERE id = %i", table, row, value, sqlid);
	mysql_pquery(sqlConnection, query);
	return true;
}

Server:SaveSQLString(sqlid, table[], row[], value[])
{
	new query[512];
	mysql_format(sqlConnection, query, sizeof(query), "UPDATE %e SET %e = %s WHERE id = %i", table, row, value, sqlid);
	mysql_pquery(sqlConnection, query);
	return true;
}

Server:DefaultPlayerValues(playerid)
{
	LoginChance[playerid] = 0;
	LoggedIn[playerid] = false;
	GeneralOOC[playerid] = false;
	Hospitalized[playerid] = 0;
	AcceptDeath[playerid] = 0;
	Injured[playerid] = 0;
	UserIP[playerid] = 0;

	PlayerData[playerid][pSQLID] = 0;
	PlayerData[playerid][pAdminLevel] = 0;
	PlayerData[playerid][pHelper] = 0;
	PlayerData[playerid][pTester] = 0;
	PlayerData[playerid][pDonator] = 0;
	PlayerData[playerid][pAge] = 18;
	PlayerData[playerid][pSex] = 0;
	PlayerData[playerid][pEthnicity] = 0;
	PlayerData[playerid][pMoney] = 0;
	PlayerData[playerid][pLevel] = 1;
	PlayerData[playerid][pRespect] = 0;
	PlayerData[playerid][pTimePlayed] = 0;
	PlayerData[playerid][pSkin] = 299;
	PlayerData[playerid][pHealth] = 100;
	PlayerData[playerid][pArmour] = 0;
	PlayerData[playerid][pHitman] = 0;
	ResetDamageData(playerid);
	return true;
}

Server:DoesPlayerExist(playerid)
{
	new query[512];
	mysql_format(sqlConnection, query, sizeof(query), "SELECT id FROM players WHERE Name = '%e' LIMIT 1", GetName(playerid));
	mysql_tquery(sqlConnection, query, "SQL_DoesPlayerExist", "i", playerid);
	return true;
}

Server:SQL_DoesPlayerExist(playerid)
{
	if(cache_num_rows(sqlConnection) != 0)
	{
		ShowLoginDialog(playerid, "");
	}
	else
	{
		ShowRegisterDialog(playerid, "");
	}

	SetPlayerPos(playerid, -206.8355, 1120.8429, 14.7422);
	SetPlayerCameraLookAt(playerid, -206.8355, 1120.8429, 19.7422);
	SetPlayerCameraPos(playerid, -109.4670, 1133.6563, 70.2519);
	TogglePlayerSpectating(playerid, true);

	new string[512];
	for(new i = 0; i < 50; i++) SendClientMessageToAll(COLOR_WHITE, " ");
	format(string, sizeof(string), "Welcome to Prospect Roleplay, %s {FFFFFF}[Version "SVR_VERSION" | www.ny-rp.eu]", NameRP(playerid));
	SendClientMessage(playerid, COLOR_LIGHTRED, string);
	PlayAudioStreamForPlayer(playerid, "https://prospectrp.eu/prospect-intro.mp3");

	// cam pos = -109.4670, 1133.6563, 70.2519
	// camlookat & playerpos = -206.8355, 1120.8429, 14.7422
	return true;
}

Server:TIMER_SetCameraPos(playerid)
{
	SetPlayerPos(playerid, -206.8355, 1120.8429, 14.7422);
	SetPlayerCameraLookAt(playerid, -206.8355, 1120.8429, 19.7422);
	SetPlayerCameraPos(playerid, -109.4670, 1133.6563, 70.2519);
	// cam pos = -109.4670, 1133.6563, 70.2519
	// camlookat & playerpos = -206.8355, 1120.8429, 14.7422
	return true;
}

Server:OnPasswordHashed(playerid)
{
    new hash[BCRYPT_HASH_LENGTH], query[1000], year, month, day;

    bcrypt_get_hash(hash);
    getdate(year, month, day);
    format(PlayerData[playerid][pRegisterDate], 16, "%02d/%02d/%d", day, month, year);
	
	mysql_format(sqlConnection, query, sizeof(query), "INSERT INTO players (Name, Password, RegIP, RegDate) VALUES ('%e', '%e', '%e', '%e')", GetName(playerid), hash, GetIP(playerid), PlayerData[playerid][pRegisterDate]);
	mysql_tquery(sqlConnection, query, "SQL_OnAccountRegister", "i", playerid);
    
	printf("Password hashed for player %d: %s", playerid, hash);
	return true;
}

Server:OnPasswordChecked(playerid)
{
    new bool:match = bcrypt_is_equal();
    if(match)
    {
		new query[512];
		mysql_format(sqlConnection, query, sizeof(query), "SELECT id FROM players WHERE Name = '%e' LIMIT 1", GetName(playerid));
		mysql_tquery(sqlConnection, query, "SQL_OnAccountLogin", "i", playerid);
    }
    else
    {
        ShowLoginDialog(playerid, "[ERROR]:{FFFFFF} You have entered an incorrect password.");
		LoginChance[playerid]++;
		if(LoginChance[playerid] == 3)
		{
			SendServerMessage(playerid, "You have been kicked for bad password attempts.");
			return KickEx(playerid);
		}
    }

	printf("Password checked for %d: %s", playerid, (match) ? ("Match") : ("No match"));
    return true;
}

Server:OnPasswordChanged(playerid)
{
    new hash[BCRYPT_HASH_LENGTH], query[300];

    bcrypt_get_hash(hash);
    
    mysql_format(sqlConnection, query, sizeof(query), "UPDATE `players` SET `Password` = '%e' WHERE `Name` = '%e'", hash, GetName(playerid));
    mysql_query(sqlConnection, query);
    
    SendServerMessage(playerid, "You have successfully changed your password.");
    
	if(_:logchannel == 0) logchannel = DCC_FindChannelById("545641478064701440");
    format(dstr, sizeof(dstr), "Prospect Local: %s has changed his password. (%s)", GetName(playerid), GetDate());
	DCC_SendChannelMessage(logchannel, dstr);
    return true;
}

Server:OnOfflineChangePass(playerid, playername[], newpassword[])
{
	if(cache_num_rows() != 1) return SendErrorMessage(playerid, "That account does not exist in the database.");

	new adminlevel = cache_get_field_content_int(0, "AdminLevel");

	if(adminlevel > PlayerData[playerid][pAdminLevel]) return SendErrorMessage(playerid, "That player's account is a higher level admin than you.");

    bcrypt_hash(newpassword, BCRYPT_COST, "OnPasswordOfflineChanged", "ds", playerid, playername);
	return true;
}

Server:OnPasswordOfflineChanged(admin, target[])
{
    new hash[BCRYPT_HASH_LENGTH], query[500], str[128];

    bcrypt_get_hash(hash);

    printf("%s (%d) has changed %s's password.", NameRP(admin), admin, target);

    mysql_format(sqlConnection, query, sizeof(query), "UPDATE `players` SET `Password` = '%e' WHERE `Name` = '%e' LIMIT 1", hash, target);
    mysql_pquery(sqlConnection, query);

    format(str, sizeof(str), "%s %s (ID: %i) has changed %s's password.", AdminRank(admin), NameRP(admin), admin, target);
	SendAdminMessage(1, str);

	if(_:logchannel == 0) logchannel = DCC_FindChannelById("545641478064701440");
    format(dstr, sizeof(dstr), "Prospect Local: %s %s has changed %s's password. (%s)", AdminRank(admin), NameRP(admin), target, GetDate());
	DCC_SendChannelMessage(logchannel, dstr);
    return true;
}

Server:ShowLoginDialog(playerid, error[])
{
	if(LoggedIn[playerid]) return true;
	if(!strmatch(error, ""))
	{
		SendClientMessage(playerid, COLOR_RED, error);
	}

	new title[60];
    new msgstring[110];
    format(title, sizeof(title), "{FFFFFF}Prospect Roleplay - Login");
    format(msgstring, sizeof(msgstring), "{FFFFFF}That username is registered, please enter your password below.\n\n{969696}Choose a Password:", msgstring);
	ShowLoginScreenTextDraw(playerid);
	ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, title, msgstring, "Login", "Quit");
	return true;
}

Server:ShowRegisterDialog(playerid, error[])
{
	if(LoggedIn[playerid]) return true;
	if(!strmatch(error, ""))
	{
		SendClientMessage(playerid, COLOR_RED, error);
	}

	new title[60];
    new msgstring[110];
    format(title, sizeof(title), "{FFFFFF}Prospect Roleplay - Registration");
    format(msgstring, sizeof(msgstring), "{FFFFFF}You may register this username by entering your desired password below.\n\n{969696}Choose a Password:", msgstring);
	ShowLoginScreenTextDraw(playerid);
	ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, title, msgstring, "Register", "Quit");
	return true;
}

Server:ShowBetaDialog(playerid)
{
	new string[300];
	strcat(string, "Welcome to the Public Beta!\n\n");
	strcat(string, "The server is in public beta, this is NOT the final release. Please report any bugs you find\n");
	strcat(string, "on the forum. All stats will be reset so do not bother wasting your time bug exploiting.\n\n");
	strcat(string, "Thank you\n{AFAFAF}- Prospect Roleplay, Management.");
	ShowPlayerDialog(playerid, DIALOG_BETA, DIALOG_STYLE_MSGBOX, "Prospect Roleplay - Public Beta", string, "Okay", "");
	return true;
}

Server:ShowChangePassDialog(playerid)
{
	new string[128];
	format(string, sizeof(string), "{FFFFFF}Password Change\nInput the new password you want to have for your account.");
    ShowPlayerDialog(playerid, DIALOG_PASSWORDCHANGE, DIALOG_STYLE_PASSWORD, "Change your password", string, "Change", "Close");
	return true;
}

Server:SQL_OnAccountLogin(playerid)
{
	PlayerData[playerid][pSQLID] = cache_get_field_content_int(0, "id", sqlConnection);
	LoadPlayerData(playerid);

	new string[256];
	for(new i = 0; i < 50; i++) SendClientMessageToAll(COLOR_WHITE, " ");
	
	format(string, sizeof(string), "[LOGIN]:{FFFFFF} You have successfully logged in as {008000}%s{FFFFFF}, your account information is now being loaded.", NameRP(playerid));
	SendClientMessage(playerid, COLOR_GREEN, string);
	
	SendClientMessage(playerid, COLOR_GREEN, "[LOGIN]:{FFFFFF} Last login was {AFAFAF}0 days and 0 hours ago {FFFFFF}({AFAFAF}/logins{FFFFFF}).");
	return true;
}

Server:LoadPlayerData(playerid)
{
	new query[512];
	mysql_format(sqlConnection, query, sizeof(query), "SELECT * FROM players WHERE id = %i LIMIT 1", PlayerData[playerid][pSQLID]);
	mysql_pquery(sqlConnection, query, "SQL_OnLoadAccount", "i", playerid);
	return true;
}

Server:SQL_OnLoadAccount(playerid)
{
	LoggedIn[playerid] = true;

	new query[256];
	cache_get_field_content(0, "RegDate", query);
	format(PlayerData[playerid][pRegisterDate], 16, query);
	PlayerData[playerid][pAdminLevel] = cache_get_field_content_int(0, "AdminLevel", sqlConnection);
	PlayerData[playerid][pHelper] = cache_get_field_content_int(0, "Helper", sqlConnection);
	PlayerData[playerid][pTester] = cache_get_field_content_int(0, "Tester", sqlConnection);
	PlayerData[playerid][pDonator] = cache_get_field_content_int(0, "Donator", sqlConnection);
	PlayerData[playerid][pAge] = cache_get_field_content_int(0, "Age", sqlConnection);
	PlayerData[playerid][pSex] = cache_get_field_content_int(0, "Gender", sqlConnection);
	PlayerData[playerid][pEthnicity] = cache_get_field_content_int(0, "Ethnicity", sqlConnection);
	PlayerData[playerid][pMoney] = cache_get_field_content_int(0, "Money", sqlConnection);
	PlayerData[playerid][pLevel] = cache_get_field_content_int(0, "Level", sqlConnection);
	PlayerData[playerid][pRespect] = cache_get_field_content_int(0, "Respect", sqlConnection);
	PlayerData[playerid][pTimePlayed] = cache_get_field_content_int(0, "PlayedTime", sqlConnection);
	PlayerData[playerid][pLastPos][0] = cache_get_field_content_float(0, "LastX", sqlConnection);
	PlayerData[playerid][pLastPos][1] = cache_get_field_content_float(0, "LastY", sqlConnection);
	PlayerData[playerid][pLastPos][2] = cache_get_field_content_float(0, "LastZ", sqlConnection);
	PlayerData[playerid][pLastPos][3] = cache_get_field_content_float(0, "LastRot", sqlConnection);
	PlayerData[playerid][pLastInt] = cache_get_field_content_int(0, "Interior", sqlConnection);
	PlayerData[playerid][pLastWorld] = cache_get_field_content_int(0, "World", sqlConnection);
	PlayerData[playerid][pSkin] = cache_get_field_content_int(0, "Skin", sqlConnection);
	PlayerData[playerid][pHealth] = cache_get_field_content_float(0, "Health", sqlConnection);
	PlayerData[playerid][pArmour] = cache_get_field_content_float(0, "Armour", sqlConnection);
	PlayerData[playerid][pHitman] = cache_get_field_content_int(0, "Hitman", sqlConnection);

	SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
	SetPlayerScore(playerid, PlayerData[playerid][pLevel]);
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, PlayerData[playerid][pMoney]);
	SetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
	SetPlayerArmour(playerid, PlayerData[playerid][pArmour]);
	TogglePlayerSpectating(playerid, false);
	SetPlayerSpawn(playerid);
	SetPlayerColor(playerid, 0xFFFFFFFF);
	HideLoginScreenTextDraw(playerid);

	new string[512];
	format(string, sizeof(string), "Admin Level: %d | Player Level: %d | Respect Points: %d | Faction: Civilian (n/a)", PlayerData[playerid][pAdminLevel], PlayerData[playerid][pLevel], PlayerData[playerid][pRespect]);
	SendClientMessage(playerid, COLOR_ALT, string);
    format(string, sizeof(string), "[Player MOTD]: %s", MOTDText);
    SendClientMessage(playerid, COLOR_WHITE, string);
	ShowBetaDialog(playerid);
	return true;
}

Server:TIMER_OneSecondTimer()
{
	foreach(new i : Player)
	{
		if(LoggedIn[i])
		{
			lastSaveTime++;
			if(lastSaveTime < 5 )
			{
				SavePlayer(i, false);
			}
			else
			{
				SavePlayer(i, true);
				lastSaveTime = 0;
			}
		}
	}
	return true;
}

Server:SavePlayer(playerid, bool:save)
{
	GetPlayerPos(playerid, PlayerData[playerid][pLastPos][0], PlayerData[playerid][pLastPos][1], PlayerData[playerid][pLastPos][2]);
	GetPlayerFacingAngle(playerid, PlayerData[playerid][pLastPos][3]);
	GetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
	GetPlayerArmour(playerid, PlayerData[playerid][pArmour]);

	PlayerData[playerid][pLastInt] = GetPlayerInterior(playerid);
	PlayerData[playerid][pLastWorld] = GetPlayerVirtualWorld(playerid);
	PlayerData[playerid][pSkin] = GetPlayerSkin(playerid);

	if(save)
	{
		new query[512];
		mysql_format(sqlConnection, query, sizeof(query), "UPDATE players SET LastX = %f, LastY = %f, LastZ = %f, LastRot = %f, Interior = %i, World = %i, Skin = %i, Health = %f, Armour = %f WHERE id = %i LIMIT 1",
		PlayerData[playerid][pLastPos][0], PlayerData[playerid][pLastPos][1], PlayerData[playerid][pLastPos][2], PlayerData[playerid][pLastPos][3],
		PlayerData[playerid][pLastInt], PlayerData[playerid][pLastWorld], PlayerData[playerid][pSkin], PlayerData[playerid][pHealth], PlayerData[playerid][pArmour], PlayerData[playerid][pSQLID]);
		mysql_pquery(sqlConnection, query);
	}
	return true;
}

Server:SavePlayerToDB(playerid)
{
	new query[512];
	mysql_format(sqlConnection, query, sizeof(query), "UPDATE players SET AdminLevel = %i, Helper = %i, Tester = %i, Donator = %i WHERE id = %i LIMIT 1",
	    PlayerData[playerid][pAdminLevel],
        PlayerData[playerid][pHelper],
        PlayerData[playerid][pTester],
        PlayerData[playerid][pDonator],
        PlayerData[playerid][pSQLID]);
	mysql_tquery(sqlConnection, query);

    mysql_format(sqlConnection, query, sizeof(query), "UPDATE players SET Age = %i, Gender = %i, Ethnicity = %i, Money = %i, Level = %i, Respect = %i, Hitman = %i WHERE id = %i LIMIT 1",
        PlayerData[playerid][pAge],
        PlayerData[playerid][pSex], 
        PlayerData[playerid][pEthnicity],
        PlayerData[playerid][pSQLID]);
	mysql_tquery(sqlConnection, query);

    mysql_format(sqlConnection, query, sizeof(query), "UPDATE players SET Money = %i, Level = %i, Respect = %i, PlayedTime = %i, Hitman = %i WHERE id = %i LIMIT 1",
        PlayerData[playerid][pMoney],
        PlayerData[playerid][pLevel],
        PlayerData[playerid][pRespect],
        PlayerData[playerid][pTimePlayed],
        PlayerData[playerid][pHitman],
        PlayerData[playerid][pSQLID]);
	mysql_tquery(sqlConnection, query);

	/*mysql_format(sqlConnection, query, sizeof(query), "UPDATE players SET AdminName = %s WHERE id = %i LIMIT 1",
		PlayerData[playerid][pAdminName]
		PlayerData[playerid[pSQLID]]);
	mysql_tquery(sqlConnection, query);*/
	return true;
}

Server:SetPlayerSpawn(playerid)
{
	SetSpawnInfo(playerid, 0, PlayerData[playerid][pSkin], PlayerData[playerid][pLastPos][0], PlayerData[playerid][pLastPos][1], PlayerData[playerid][pLastPos][2], PlayerData[playerid][pLastPos][3], 0, 0, 0, 0, 0, 0);
	SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
	SpawnPlayer(playerid);
	SetPlayerVirtualWorld(playerid, PlayerData[playerid][pLastWorld]);
	SetPlayerInterior(playerid, PlayerData[playerid][pLastInt]);
	return true;
}

Server:SQL_OnAccountRegister(playerid)
{
	new string[256];
	for(new i = 0; i < 50; i++) SendClientMessageToAll(COLOR_WHITE, " ");
	format(string, sizeof(string), "[REGISTER]:{FFFFFF} You have successfully registered to the server as %s, your account information is now being saved.", NameRP(playerid));
	SendClientMessage(playerid, COLOR_GREEN, string);
	displayWelcomeMessage(playerid);
	SetTimerEx("removeWelcomeMessage", 5000, false, "i", playerid);
	DefaultPlayerValues(playerid);
	PlayerData[playerid][pSQLID] = cache_insert_id();
	LoadPlayerData(playerid);
	return true;
}

Server:GetDistanceBetweenPlayers(playerid, id, Float:distance)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	foreach(new i : Player)
	{
		if(LoggedIn[id] && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(id) && GetPlayerInterior(playerid) == GetPlayerInterior(id))
		{
			if(IsPlayerInRangeOfPoint(id, distance, x, y, z))
			{
				return true;
			}
		}
	}
	return false;
}

Server:SendLocalMessage(playerid, color, msg[])
{
	if(!LoggedIn[playerid]) return true;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	foreach(new i : Player)
	{
		if(LoggedIn[i])
		{
			if(IsPlayerInRangeOfPoint(i, 15.0, x, y, z) && GetPlayerInterior(i) == GetPlayerInterior(playerid) && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
			{
				SendClientMessage(i, color, msg);
			}
		}
	}
	return true;
}

Server:SendLocalMessageEx(playerid, color, msg[], Float:distance)
{
	if(!LoggedIn[playerid]) return true;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	foreach(new i : Player)
	{
		if(LoggedIn[i])
		{
			if(IsPlayerInRangeOfPoint(i, distance, x, y, z) && GetPlayerInterior(i) == GetPlayerInterior(playerid) && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
			{
				SendClientMessage(i, color, msg);
			}
		}
	}
	return true;
}

Server:UpdateNametag()
{
	foreach(new i : Player)
	{
        if(IsPlayerConnected(i))
        {
            new nametag[512];
			format(nametag, sizeof(nametag), "{%06x}%s {FFFFFF}(%i)", GetPlayerColor(i) >>> 8, NameRP(i), i);
			UpdateDynamic3DTextLabelText(cNametag[i], 0xFFFFFFFF, nametag);
		}
	}
}

GetDamageType(weaponid)
{
	new damageType[25] = EOS;
		
	switch(weaponid)
	{
		case 0 .. 3, 5 .. 7, 10 .. 15:damageType = "Blunt Trauma";
		case 4, 8, 9:damageType = "Stab Wound";
		case 22 .. 34:damageType = "Gunshot Wound";
		case 18, 35, 36, 37, 16, 39, 40:damageType = "Explosive/Burn Wound";
		default:damageType = "Unknown Wound";
	}

	return damageType;
}

Server:ResetDamageData(playerid)
{
	for(new i = 0; i < MAX_DAMAGES; i++)
	{
		if(DamageData[i][DamagePlayerID] == playerid)
		{
			DamageData[i][DamagePlayerID] = INVALID_PLAYER_ID;
			DamageData[i][DamageWeapon] = INVALID_WEAPON_ID;
			DamageData[i][DamageBodypart] = 0;
			DamageData[i][DamageAmount] = 0.0;
		}
	}
	return true;
}

Server:SaveDamageData(playerid, weaponid, bodypart, Float:amount)
{
	totalDamages ++;
	new i = totalDamages;

	DamageData[i][DamagePlayerID] = playerid;
	DamageData[i][DamageWeapon] = weaponid;
	DamageData[i][DamageBodypart] = bodypart;
	DamageData[i][DamageAmount] = amount;
	return true;
}

GetBoneDamaged(bodypart)
{
	new bodypartR[20] = EOS;
	switch(bodypart)
	{
		case BODY_PART_TORSO:bodypartR = "Torso";
		case BODY_PART_GROIN:bodypartR = "Groin";
		case BODY_PART_LEFT_ARM:bodypartR = "Left Arm";
		case BODY_PART_RIGHT_ARM:bodypartR = "Right Arm";
		case BODY_PART_LEFT_LEG:bodypartR = "Left Leg";
		case BODY_PART_RIGHT_LEG:bodypartR = "Right Leg";
		case BODY_PART_HEAD:bodypartR = "Head";
	}
	return bodypartR;
}

Server:DisplayDamageData(playerid, forplayerid)
{
	new count = 0;
	for(new i = 0; i < MAX_DAMAGES; i++)
	{
		if(DamageData[i][DamagePlayerID] == playerid)
		{
			count++;
		}
	}

	new longstr[512] = EOS, weaponname[20] = EOS;
	if(!count) return SendServerMessage(forplayerid, "That player hasn't been injured.");
	for(new i = 0; i < MAX_DAMAGES; i++)
	{
		if(DamageData[i][DamagePlayerID] == playerid)
		{
			GetWeaponName(DamageData[i][DamageWeapon], weaponname, sizeof(weaponname));
			format(longstr, sizeof(longstr), "Injuries\tBodypart\tWeapon\n%s\t%s\t%s\n", GetDamageType(DamageData[i][DamageWeapon]), GetBoneDamaged(DamageData[i][DamageBodypart]), weaponname);
		}
	}
	ShowPlayerDialog(playerid, DIALOG_DAMAGE, DIALOG_STYLE_TABLIST_HEADERS, "{FF0000}Damage Information", longstr, "Ok", "");
	return true;
}

/*ShowPlayerDialog(playerid, YOUR_DIALOGID, DIALOG_STYLE_TABLIST_HEADERS, "Caption",
"Header 1\tHeader 2\tHeader 3\n\
Item 1 Column 1\tItem 1 Column 2\tItem 1 Column 3\n\
{FF0000}Item 2 Column 1\t{33AA33}Item 2 Column 2\tItem 2 Column 3",
"Button 1", "Button 2");*/

Server:removeWelcomeMessage(playerid)
{
	for(new i; i < 9; i++)
	{
		TextDrawHideForPlayer(playerid, TDEditor_TD[i]);
	}
	return true;
}

Server:KickPlayer(playerid)
{
	Kick(playerid);
}

Server:ServerRestart(playerid)
{
	SendClientMessageToAll(COLOR_GOLD, "[Announcement]:{FFFFFF} The server is restarting.");
    SetTimer("restartmsg", 100, false);
    return true;
}

Server:restartmsg(playerid)
{
    foreach (new i : Player)
    Kick(i);
    SetTimer("GmX", 1000, false);
    return true;
}

Server:GmX(playerid)
{
	OnDiscordRestart();
    foreach(new i : Player)
    Kick(i);
    SendRconCommand("gmx");
    return true;
}

Server:CanAcceptDeath(playerid)
{
    AcceptDeath[playerid] = 1;
	SendServerMessage(playerid, "You can now authorized to accept death.");
}

Server:HospitalTimer(playerid)
{
    Hospitalized[playerid] = 0;
	SendClientMessage(playerid, -1, "You have recovered at the All Saints General Hospital.");
	SetPlayerPos(playerid, 1178.4012, -1323.2754, 14.1183);
	SetPlayerFacingAngle(playerid, 270.0);
	SetCameraBehindPlayer(playerid);
	SetPlayerHealth(playerid, 100.0);
	TogglePlayerControllable(playerid, 1);
}

Server:LoseHealth(playerid)
{
    new Float:health;
	GetPlayerHealth(playerid, health);
	SetPlayerHealth(playerid, health-5);
}

// STOCK FUNCTIONS //
GetName(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	return name;
}

/*GetIP(playerid)
{
	new pip[20];
	GetPlayerIp(playerid, pip, sizeof(pip));
	return pip;
}*/

GetPGender(playerid)
{
	new gender[12];
	switch(PlayerData[playerid][pSex])
	{
		case 1:gender = "his";
		case 2:gender = "her";
		default:gender = "their";
	}
	return gender;
}

GetDate()
{
	new sendString[90], MonthStr[40], month, day, year;
	new hour, minute, second;

	gettime(hour, minute, second);
	getdate(year, month, day);
	switch(month)
	{
	    case 1:  MonthStr = "January";
	    case 2:  MonthStr = "February";
	    case 3:  MonthStr = "March";
	    case 4:  MonthStr = "April";
	    case 5:  MonthStr = "May";
	    case 6:  MonthStr = "June";
	    case 7:  MonthStr = "July";
	    case 8:  MonthStr = "August";
	    case 9:  MonthStr = "September";
	    case 10: MonthStr = "October";
	    case 11: MonthStr = "November";
	    case 12: MonthStr = "December";
	}

	format(sendString, 90, "%s %d, %d %02d:%02d:%02d", MonthStr, day, year, hour, minute, second);
	return sendString;
}

NameRP(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	for(new i = 0; i < strlen(name); i++)
	{
		if(name[i] == '_')
		{
			name[i] = ' ';
		}
	}
	return name;
}

strmatch(const String1[], const String2[])
{
    if ((strcmp(String1, String2, true, strlen(String2)) == 0) && (strlen(String2) == strlen(String1)))
    {
        return true;
    }
    else
    {
        return false;
    }
}

ShowLoginScreenTextDraw(playerid, bool:showTextdraw = true)
{
	if(showTextdraw)
	{
		for(new i = 0; i < 3; i++)
		{
			PlayerTextDrawShow(playerid, LoginScreen[playerid][i]);
		}
	}
	return true;
}

HideLoginScreenTextDraw(playerid)
{
	for(new i = 0; i < 3; i++)
		{
			PlayerTextDrawHide(playerid, LoginScreen[playerid][i]);
		}
	return true;
}

displayWelcomeMessage(playerid)
{
	for(new i; i < 9; i++)
	{
		TextDrawShowForPlayer(playerid, TDEditor_TD[i]);
	}
	return true;
}

KickEx(playerid)
{
	SetTimerEx("KickPlayer", 500, false, "i", playerid);
	return true;
}

RestartEx()
{
	SetTimer("ServerRestart", 20000, false);
}

IsRPName(name[])
{
   new upos=strfind(name, "_");
   if(isnull(name)) return false;
   if(strlen(name)-2<upos<2) return false;
   for(new i = 0; i < 24; i++)
   {
      if(!name[i]) break;
      if(!i && 65 > name[i] > 90) return false;
      if(name[i] == 95 && i!=upos) return false;
      if(upos && i-upos == 1)
      {
         if(65 > name[i] > 90) return false;
      }
      if(65 <= name[i] <= 90)
      {
         if(!(!i || i==upos+1 || (i==2 && upos>5) || (i==upos+3 && strlen(name)-upos>5))) return false;
      }
      if(97 > name[i] > 122) return false;
   }
   if(upos==-1) return false;
   if(strlen(name)-upos<3) return false;
   return true;
}

SendUnauthorizedMsg(playerid)
{
	return SendErrorMessage(playerid, "You aren't authorized to use this command.");
}

GetEthnicity(targetid)
{
	new ethnicity[30];
	switch(PlayerData[targetid][pEthnicity])
	{
		case 0:
		{
			ethnicity = "White";
		}
		case 1: 
		{
			ethnicity = "Black";
		}
		case 2: 
		{
			ethnicity = "Asian";
		}
		case 3:
		{
			ethnicity = "Hispanic";
		}
	}
	return ethnicity;
}

GetGender(targetid)
{
	new gender[30];
	switch(PlayerData[targetid][pSex])
	{
		case 0:
		{
			gender = "Unknown";
		}
		case 1: 
		{
			gender = "Male";
		}
		case 2: 
		{
			gender = "Female";
		}
	}
	return gender;
}

SAdminRank(targetid)
{
	new adminrank[50];
	switch(PlayerData[targetid][pAdminLevel])
	{
		case 0:
		{
			adminrank = "None";
		}
		case 1: 
		{
			adminrank = "{11806a}Probationary Administrator";
		}
		case 2: 
		{
			adminrank = "{206694}Administrator";
		}
		case 3:
		{
			adminrank = "{3498db}Lead Administrator";
		}
		case 4:
		{
			adminrank = "{e74c3c}Management";
		}
	}
	return adminrank;
}

IsAHitman(playerid)
{
	if(PlayerData[playerid][pHitman] > 0) return true;
	return false;
}

AdminRank(targetid)
{
	new adminrank[30];
	switch(PlayerData[targetid][pAdminLevel])
	{
		case 0:
		{
			adminrank = "None";
		}
		case 1: 
		{
			adminrank = "Probationary Administrator";
		}
		case 2: 
		{
			adminrank = "Administrator";
		}
		case 3:
		{
			adminrank = "Lead Administrator";
		}
		case 4:
		{
			adminrank = "Management";
		}
	}
	return adminrank;
}

/*ReturnAdminRank(rankid)
{
	new string[30];
	switch(rankid)
	{
		case 0:
		{
			string = "None";
		}
		case 1: 
		{
			string = "Probationary Administrator";
		}
		case 2: 
		{
			string = "Administrator";
		}
		case 3:
		{
			string = "Lead Administrator";
		}
		case 4:
		{
			string = "Management";
		}
	}
	return string;
}*/

SendClientMessageEx(playerid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[156]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 156
		#emit PUSH.C string
		#emit PUSH.C args
		#emit SYSREQ.C format

		SendClientMessage(playerid, color, string);

		#emit LCTRL 5
		#emit SCTRL 4
		#emit RETN
	}
	return SendClientMessage(playerid, color, str);
} // Credits to Emmet, South Central Roleplay

/*SendClientMessageToAllEx(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.pri args
		#emit ADD.C 4
		#emit PUSH.pri
		#emit SYSREQ.C format

        #emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) {
			SendClientMessage(i, color, string);
		}
		return true;
	}
	return SendClientMessageToAll(color, str);
} // Credits to Emmet, South Central Roleplay

SendNearbyMessage(playerid, Float:radius, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 16); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (IsPlayerNearPlayer(i, playerid, radius)) {
  				SendClientMessage(i, color, string);
			}
		}
		return true;
	}
	foreach (new i : Player)
	{
		if (IsPlayerNearPlayer(i, playerid, radius)) {
			SendClientMessage(i, color, str);
		}
	}
	return true;
} // Credits to Emmet, South Central Roleplay*/

SendAdminMessage(level, const str[])
{
	new newString[128];
	format(newString, sizeof(newString), "(ADMIN INFO){FFFFFF} %s", str);

	foreach(new i : Player)
	{
		if(PlayerData[i][pAdminLevel] >= level)
		{
			SendClientMessage(i, COLOR_ADMINFO, newString);
		}
	}
	return true;
}

/*SendAdminMessageEx(color, level, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (PlayerData[i][pAdminLevel] >= level) {
  				SendClientMessage(i, color, string);
			}
		}
		return true;
	}
	foreach (new i : Player)
	{
		if (PlayerData[i][pAdminLevel] >= level) {
			SendClientMessage(i, color, str);
		}
	}
	return true;
}*/

GiveCash(playerid, amount)
{
	PlayerData[playerid][pMoney] += amount;
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, PlayerData[playerid][pMoney]);
	SaveSQLInt(PlayerData[playerid][pSQLID], "players", "Money", PlayerData[playerid][pMoney]);
	return true;
}

CountPlayerHouses(playerid)
{
	new count = 0;
	for(new i = 0; i < MAX_HOUSES; i++)
	{
		if(HouseData[i][HouseID] != 0)
		{
			if(HouseData[i][HouseOwnerSQL] == PlayerData[playerid][pSQLID])
			{
				count++;
			}
		}
	}
	return count;
}

GetNearestHouseID(playerid, Float:range = 5.0)
{
	new id = -1;
	for(new i = 0; i < MAX_HOUSES; i++)
	{
		if(HouseData[i][HouseID] != 0)
		{
			if(IsPlayerInRangeOfPoint(playerid, range, HouseData[i][HouseExterior][0], HouseData[i][HouseExterior][1], HouseData[i][HouseExterior][2]))
			{
				id = 1;
				break;
			}
		}
	}
	return id;
}

LoadMOTD()
{ 
    if(!fexist("motd.cfg"))
    {
        dini_Create("motd.cfg");
 
        format(MOTDText, 256, "Welcome to Prospect Roleplay! MOTD hasn't been adjusted yet.");
 
        dini_Set("motd.cfg", "SMOTDUpdate", MOTDText);
    }
    else
    {
        format(MOTDText, 256, "%s", dini_Get("motd.cfg", "SMOTDUpdate"));
    }
 
    printf("Prospect Local: MOTD - %s", MOTDText);
    return 1;
}

UpdateMOTD()
{
    dini_Set("motd.cfg", "SMOTDUpdate", MOTDText);
    return 1;
}