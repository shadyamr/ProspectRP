/*
 * Prospect Roleplay (c) 2018-2019
 * Developed by Shady
 * Purpose: General Commands
 */

CMD:acceptdeath(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(Injured[playerid] == 1)
	{
		if (AcceptDeath[playerid] == 1)
		{
			SetPlayerHealth(playerid, 0.0);
			KillTimer(LoseHealthTimer[playerid]);
			SendServerMessage(playerid, "You have accepted death, therefore you'll be transferred to hospital.");
		}
		else if (AcceptDeath[playerid] == 0)
		{
			SendErrorMessage(playerid, "You must wait atleast one minute before accepting death.");
		}
	}
	else if (Injured[playerid] == 0)
	{
		SendErrorMessage(playerid, "You are not injured right now.");
	}
	return true; 
}

CMD:kill(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(!PlayerData[playerid][pAdminLevel]) return SendUnauthorizedMsg(playerid);
	SetPlayerHealth(playerid, 0);
	return true;
}

CMD:enter(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(!IsPlayerInAnyVehicle(playerid))
	{
		for(new i = 0; i < MAX_HOUSES; i++)
		{
			if(HouseData[i][HouseID] != 0)
			{
				if(IsPlayerInRangeOfPoint(playerid, 5.0, HouseData[i][HouseExterior][0], HouseData[i][HouseExterior][1], HouseData[i][HouseExterior][2]))
				{
					if(HouseData[i][HouseLocked] == 0)
					{
						SetPlayerPos(playerid, HouseData[i][HouseInterior][0], HouseData[i][HouseInterior][1], HouseData[i][HouseInterior][2]);
						SetPlayerFacingAngle(playerid, HouseData[i][HouseInterior][3]);
						SetPlayerInterior(playerid, HouseData[i][HouseInteriorID]);
						SetPlayerVirtualWorld(playerid, HouseData[i][HouseID]);
					}
					else return SendErrorMessage(playerid, "This house is locked.");
				}
			}
		}
	}
	return true;
}

CMD:exit(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(!IsPlayerInAnyVehicle(playerid))
	{
		for(new i = 0; i < MAX_HOUSES; i++)
		{
			if(HouseData[i][HouseID] != 0)
			{
				if(GetPlayerVirtualWorld(playerid) == HouseData[i][HouseID])
				{
					if(IsPlayerInRangeOfPoint(playerid, 5.0, HouseData[i][HouseInterior][0], HouseData[i][HouseInterior][1], HouseData[i][HouseInterior][2]))
					{
						SetPlayerPos(playerid, HouseData[i][HouseExterior][0], HouseData[i][HouseExterior][1], HouseData[i][HouseExterior][2]);
						SetPlayerFacingAngle(playerid, HouseData[i][HouseExterior][3]);
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid, 0);
					}
				}
			}
		}
	}
	return true;
}

CMD:commands(playerid, params[]) return cmd_help(playerid, params);
CMD:cmds(playerid, params[]) return cmd_help(playerid, params);
CMD:help(playerid, params[])
{
    new string[512];
    if(!LoggedIn[playerid]) return true;
    format(string, sizeof(string), "/fps, /stats, /skintest, /helpers, /admins, /stopanim, /enter, /exit");
	SendClientMessage(playerid, COLOR_GREY, string);
    format(string, sizeof(string), "/id, /examine, /blindfold, /ame, /report, /reportbug, /serverstats, /l(ow)");
	SendClientMessage(playerid, COLOR_GREY, string);
    format(string, sizeof(string), "/s(hout), /w(hisper), /o(oc), /attempt, /b, /me, /do, /injuries, /credits, /pm");
	SendClientMessage(playerid, COLOR_GREY, string);
	return true;
}

/*CMD:admins(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	SendClientMessage(playerid, COLOR_WHITE, "Administrators Online:");
	foreach(new i: Player)
	{
		if(PlayerData[i][pAdminLevel])
		{
			SendClientMessageEx(playerid, COLOR_GREY, "%s: %s", AdminRank(i), NameRP(i));
		}
		else
		{
			return SendClientMessage(playerid, COLOR_GREY, "There are no administrators' online.");
		}
	}

	return true;
}*/

CMD:admins(playerid,params[])
{
    if(!LoggedIn[playerid]) return true;
	new string[256];
	for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            if(PlayerData[i][pAdminLevel] > 1)
            {
                format(string, sizeof(string), "%s{FFFFFF} - AdminName (%s)", SAdminRank(i), NameRP(i));
            }
			else
			{
				format(string, sizeof(string), "There are no staff members online at the moment.");
			}
        }
	}
    ShowPlayerDialog(playerid, DIALOG_ADMINS, DIALOG_STYLE_LIST, "Staff Team", string, "Close", "");
    return true;
}

CMD:s(playerid, params[]) return cmd_shout(playerid, params);
CMD:shout(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(isnull(params)) return SendUsageMessage(playerid, "/s(hout) [shout message]");

	new string[128];
	format(string, sizeof(string), "%s shouts: %s!", NameRP(playerid), params);
	SendLocalMessageEx(playerid, COLOR_SHOUT, string, 20.0);
	return true;
}

CMD:l(playerid, params[]) return cmd_low(playerid, params);
CMD:low(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(isnull(params)) return SendUsageMessage(playerid, "/l(ow) [low message]");

	new string[128];
	format(string, sizeof(string), "[Quiet] %s says: %s", NameRP(playerid), params);
	SendLocalMessageEx(playerid, COLOR_WHITE, string, 7.6);
	return true;
}

CMD:w(playerid, params[]) return cmd_whisper(playerid, params);
CMD:whisper(playerid, params[])
{
	new id, msg[80], string[128];
	if(!LoggedIn[playerid]) return true;
	if(sscanf(params, "us[80]", id, msg)) return SendUsageMessage(playerid, "/w(hisper) [playerid or name] [whisper message]");
	if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "That player isn't connected.");
	if(!LoggedIn[id]) return SendErrorMessage(playerid, "That player isn't logged in.");

	if(!GetDistanceBetweenPlayers(playerid, id, 3.5)) return SendErrorMessage(playerid, "You must be close to the player in order to whisper them.");
	format(string, sizeof(string), "[Whisper from %s]: %s", NameRP(playerid), msg);
	SendClientMessage(id, COLOR_YELLOW, string);

	format(string, sizeof(string), "[Whisper to %s]: %s", NameRP(id), msg);
	SendClientMessage(playerid, COLOR_YELLOW, string);

	format(string, sizeof(string), "* %s whispers something to %s... *", NameRP(playerid), NameRP(id));
	SendLocalMessage(playerid, COLOR_EMOTE, string);
	return true;
}

CMD:attempt(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(isnull(params)) return SendUsageMessage(playerid, "/attempt [action message]");
	
	new string[128], rand = (0 + random(50));
	
	format(string, sizeof(string), "* %s has attempted to %s and ", NameRP(playerid), params);
	switch(rand)
	{
		case 0 .. 25:
		{
			strins(string, "failed.", strlen(string));
		}
		default:
		{
			strins(string, "succeeded.", strlen(string));
		}
	}

	SendLocalMessage(playerid, COLOR_EMOTE, string);
	return true;
}

CMD:b(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(isnull(params)) return SendUsageMessage(playerid, "/b [local OOC message]");

	new string[128];
	format(string, sizeof(string), "[OOC-L] (( %s [%d]:{FFFFFF} %s {AFAFAF}))", NameRP(playerid), playerid, params);
	SendLocalMessage(playerid, COLOR_GREY, string);
	return true;
}

CMD:o(playerid, params[]) return cmd_ooc(playerid, params);
CMD:ooc(playerid, params[])
{
	new string[128];
	if(!LoggedIn[playerid]) return true;
	if(isnull(params)) return SendUsageMessage(playerid, "/ooc [general OOC message]");

	if(!GeneralOOC[playerid])
	{
		SendErrorMessage(playerid, "This chat is disabled.");
	}
	else
	{
		format(string, sizeof(string), "[OOC-G] (( %s [%d]: %s ))", NameRP(playerid), playerid, params);
		SendClientMessageToAll(COLOR_SANDYBROWN, string);
	}
	return true;
}

CMD:pm(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;

	new id, msg[128], string[128];
	if(sscanf(params, "us[80]", id, msg)) return SendUsageMessage(playerid, "/pm [playerid or name] [message]");
	if(playerid == id) return SendErrorMessage(playerid, "You can't send yourself a private message.");
	if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "That player isn't connected.");
	if(!LoggedIn[id]) return SendErrorMessage(playerid, "That player isn't logged in.");

	format(string, sizeof(string), "(( PM from %s [%d]: %s ))", NameRP(playerid), playerid, msg);
	SendClientMessage(id, COLOR_YELLOW, string);

	format(string, sizeof(string), "(( PM sent to %s [%d]: %s ))", NameRP(id), id, msg);
	SendClientMessage(playerid, COLOR_LIGHTYYELLOW, string);
	return true;
}

CMD:me(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(isnull(params)) return SendUsageMessage(playerid, "/me [action message]");

	new string[128];
	format(string, sizeof(string), "* %s %s", NameRP(playerid), params);
	SendLocalMessage(playerid, COLOR_EMOTE, string);
	return true;
}

CMD:do(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(isnull(params)) return SendUsageMessage(playerid, "/do [action message]");

	new string[128];
	format(string, sizeof(string), "* %s (( %s ))", params, NameRP(playerid));
	SendLocalMessage(playerid, COLOR_EMOTE, string);
	return true;
}

CMD:ame(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(isnull(params)) return SendUsageMessage(playerid, "/ame [annotated action message]");

	SetPlayerChatBubble(playerid, params, COLOR_EMOTE, 15.0, 10000);

	new string[128];
	format(string, sizeof(string), "* Annotated message: %s", params);
	SendClientMessage(playerid, COLOR_EMOTE, string);
	return true;
}

CMD:injuries(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	new id;
	if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/injuries [playerid or name]");
	if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "That player isn't connected.");
	if(!LoggedIn[id]) return SendErrorMessage(playerid, "That player isn't logged in.");
	if(!GetDistanceBetweenPlayers(playerid, id, 5.0)) return SendErrorMessage(playerid, "You must be close to the player in order to whisper them.");
	DisplayDamageData(id, playerid);
	return true;
}

CMD:credits(playerid, params[])
{
	new string[230];
	if(!LoggedIn[playerid]) return true;
	strcat(string, "Project Serranilla Roleplay would like to take the time to mention the following members\n");
	strcat(string, "and behalf of that, giving them some credit for their appreciated contribution\n");
	strcat(string, "to our wonderful server.\n\n");
	strcat(string, "{1ABC9C}Shady{FFFFFF} - Owner & Scripter\n");
	ShowPlayerDialog(playerid, DIALOG_CREDITS, DIALOG_STYLE_MSGBOX, "Server Credits", string, "Close", "");
	return true;
}

CMD:id(playerid, params[])
{
    new id, string[128];
	if(!LoggedIn[playerid]) return true;
    if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/id [playerid or name]");
	if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "That player isn't connected.");
	if(!LoggedIn[id]) return SendErrorMessage(playerid, "That player isn't logged in.");
		
	format(string, sizeof(string), "(ID: %d) %s | Level: %d", id, NameRP(playerid), PlayerData[id][pLevel]);
	SendClientMessage(playerid, COLOR_WHITE, string);
    return true;
}

CMD:examine(playerid, params[])
{
	new playerb, string[128];
	if(!LoggedIn[playerid]) return true;
	if(sscanf(params, "u", playerb)) return SendUsageMessage(playerid, "/examine [playerid or name]");
	if(!IsPlayerConnected(playerb)) return SendErrorMessage(playerid, "That player isn't connected.");
	if(!LoggedIn[playerb]) return SendErrorMessage(playerid, "That player isn't logged in.");
	if(!GetDistanceBetweenPlayers(playerid, playerb, 3.5)) return SendErrorMessage(playerid, "You must be close to the player in order to examine them.");

	format(string, sizeof(string), "[EXAMINE]{FFFFFF} %s would appear to be a %s %s who is %d years old.", NameRP(playerb), GetEthnicity(playerb), GetGender(playerb), PlayerData[playerb][pAge]);
	SendClientMessage(playerid, COLOR_MEDIUMSEAGREEN, string);
	return true;
}