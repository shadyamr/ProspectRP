static Float:hCreateExt[4], Float:hCreateInt[4], hCreateName[40], hCreatePrice, hCreateIntID;

LoadServerHouses()
{
	return mysql_pquery(sqlConnection, "SELECT * FROM houses ORDER BY id ASC", "SQL_LoadServerHouses");
}

Server:SQL_LoadServerHouses()
{
	if(cache_num_rows() == 0) return print("[NY:RP] No houses were available to load from the database.");
	
	new rows, fields;
	cache_get_data(rows, fields, sqlConnection);
	for(new i = 0; i < rows && i < MAX_HOUSES; i++)
	{
		HouseData[i+1][HouseID] = cache_get_field_content_int(i, "id", sqlConnection);
		HouseData[i+1][HouseOwnerSQL] = cache_get_field_content_int(i, "OwnerSQL", sqlConnection);
		cache_get_field_content(i, "Name", HouseData[i+1][HouseName], sqlConnection, 40);
		HouseData[i+1][HouseExterior][0] = cache_get_field_content_float(i, "ExtX", sqlConnection);
		HouseData[i+1][HouseExterior][1] = cache_get_field_content_float(i, "ExtY", sqlConnection);
		HouseData[i+1][HouseExterior][2] = cache_get_field_content_float(i, "ExtZ", sqlConnection);
		HouseData[i+1][HouseExterior][3] = cache_get_field_content_float(i, "ExtA", sqlConnection);
		HouseData[i+1][HouseInterior][0] = cache_get_field_content_float(i, "IntX", sqlConnection);
		HouseData[i+1][HouseInterior][1] = cache_get_field_content_float(i, "IntY", sqlConnection);
		HouseData[i+1][HouseInterior][2] = cache_get_field_content_float(i, "IntZ", sqlConnection);
		HouseData[i+1][HouseInterior][3] = cache_get_field_content_float(i, "IntA", sqlConnection);
		HouseData[i+1][HouseInteriorID] = cache_get_field_content_int(i, "IntID", sqlConnection);
		HouseData[i+1][HousePrice] = cache_get_field_content_int(i, "Price", sqlConnection);
		TotalHousesCreated++;
	}
	CreateServerHouseData();
	printf("[NY:RP] %i houses has been loaded from the database.", TotalHousesCreated);
	return true;
}

CreateServerHouseData()
{
	for(new i = 0; i < MAX_HOUSES; i++)
	{
		if(HouseData[i][HouseID] != 0)
		{
			HouseData[i][HousePickup] = CreatePickup(1273, 1, HouseData[i][HouseExterior][0], HouseData[i][HouseExterior][1], HouseData[i][HouseExterior][2], 0);
			HouseData[i][HouseLabel] = Create3DTextLabel(HouseData[i][HouseName], 0xFFFFFFFF, HouseData[i][HouseExterior][0], HouseData[i][HouseExterior][1], HouseData[i][HouseExterior][2], 10.0, 0, 0); // should be 1 (last digit) on public
		}
	}
	return true;
}

Server:SaveHouseToDatabase(playerid)
{
	new interior = hCreateIntID, price = hCreatePrice, name[40], Float:ext[4], Float:int[4], query[500];
	format(name, sizeof(name), hCreateName);
	ext[0] = hCreateExt[0];
	ext[1] = hCreateExt[1];
	ext[2] = hCreateExt[2];
	ext[3] = hCreateExt[3];

	int[0] = hCreateInt[0];
	int[1] = hCreateInt[1];
	int[2] = hCreateInt[2];
	int[3] = hCreateInt[3];

	mysql_format(sqlConnection, query, sizeof(query), "INSERT INTO houses (`OwnerSQL`, `Name`, `ExtX`, `ExtY`, `ExtZ`, `ExtA`, `IntX`, `IntY`, `IntZ`, `IntA`, `IntID`, `Price`) VALUES(0, '%e', %f, %f, %f, %f, %f, %f, %f, %f, %i, %i)", name, ext[0], ext[1], ext[2], ext[3], int[0], int[1], int[2], int[3], interior, price);
	mysql_pquery(sqlConnection, query, "SQL_SaveHouseToDB", "i", playerid);
	return true;
}

Server:SQL_SaveHouseToDB(playerid)
{
	TotalHousesCreated++;
	new interior = hCreateIntID, price = hCreatePrice, name[40], Float:ext[4], Float:int[4], i = TotalHousesCreated, string[200];
	format(name, sizeof(name), hCreateName);
	ext[0] = hCreateExt[0];
	ext[1] = hCreateExt[1];
	ext[2] = hCreateExt[2];
	ext[3] = hCreateExt[3];

	int[0] = hCreateInt[0];
	int[1] = hCreateInt[1];
	int[2] = hCreateInt[2];
	int[3] = hCreateInt[3];

	HouseData[i][HouseID] = cache_insert_id();
	HouseData[i][HouseOwnerSQL] = 0;
	format(HouseData[i][HouseName], 40, name);
	HouseData[i][HouseExterior][0] = ext[0];
	HouseData[i][HouseExterior][1] = ext[1];
	HouseData[i][HouseExterior][2] = ext[2];
	HouseData[i][HouseExterior][3] = ext[3];
	HouseData[i][HouseInterior][0] = int[0];
	HouseData[i][HouseInterior][1] = int[1];
	HouseData[i][HouseInterior][2] = int[2];
	HouseData[i][HouseInterior][3] = int[3];
	HouseData[i][HouseInteriorID] = interior;
	HouseData[i][HousePrice] = price;

	printf("[NY:RP] House ID %i created by %s.", cache_insert_id(), GetName(playerid));
	format(string, sizeof(string), "[SERVER]:{FFFFFF} House ID [%i] created by %s, price: $%d", i, cache_insert_id(), name, price);
	SendClientMessage(playerid, COLOR_LIGHTRED, string);

	HouseData[i][HousePickup] = CreatePickup(1273, 1, HouseData[i][HouseExterior][0], HouseData[i][HouseExterior][1], HouseData[i][HouseExterior][2], 0);
	HouseData[i][HouseLabel] = Create3DTextLabel(HouseData[i][HouseName], 0xFFFFFFFF, HouseData[i][HouseExterior][0], HouseData[i][HouseExterior][1], HouseData[i][HouseExterior][2], 10.0, 0, 0);

	hCreateIntID = 0;
	hCreatePrice = 0;
	hCreateName = "None";
	for(new j = 0; j < 4; j++)
	{
		hCreateInt[j] = 0.0;
		hCreateExt[j] = 0.0;
	}
	return true;
}

CMD:createhouse(playerid, params[])
{
	if(PlayerData[playerid][pAdminLevel] < 2) return SendUnauthorizedMsg(playerid);

	new section[10], extra[40], string[50];
	if(sscanf(params, "s[10]S('None')[40]", section, extra)) return SendUsageMessage(playerid, "/createhouse [exterior/interior/name/price/complete]");
	{
		if(strmatch(section, "exterior"))
		{
			GetPlayerPos(playerid, hCreateExt[0], hCreateExt[1], hCreateExt[2]);
			GetPlayerFacingAngle(playerid, hCreateExt[3]);
			SendSuccessMessage(playerid, "Exterior position has been set successfully.");
		}
		else if(strmatch(section, "interior"))
		{
			hCreateIntID = GetPlayerInterior(playerid);
			GetPlayerPos(playerid, hCreateInt[0], hCreateInt[1], hCreateInt[1]);
			GetPlayerFacingAngle(playerid, hCreateInt[3]);
			SendSuccessMessage(playerid, "Interior position has been set successfully.");
		}
		else if(strmatch(section, "name"))
		{
			if(strmatch(extra, "None")) return SendUsageMessage(playerid, "/createhouse name [name]");
			if(strlen(extra) > 39 || strlen(extra) < 3) return SendErrorMessage(playerid, "Name length must be between 3 and 39 characters long.");
			hCreateName = extra;
			format(string, sizeof(string), "[SUCCESS]:{FFFFFF} Name has been set successfully to %s", extra);
			SendClientMessage(playerid, COLOR_GREEN, string);
		}
		else if(strmatch(section, "price"))
		{
			if(strmatch(extra, "None")) return SendUsageMessage(playerid, "/createhouse price [price]");
			if(strval(extra) < 1) return SendErrorMessage(playerid, "Price must be above $1.");
			hCreatePrice = strval(extra);
			format(string, sizeof(string), "[SUCCESS]:{FFFFFF} Price has been set successfully to $%d", strval(extra));
			SendClientMessage(playerid, COLOR_GREEN, string);
		}
		else if(strmatch(section, "complete"))
		{
			if(hCreatePrice == 0) return true;
			if(strmatch(hCreateName, "None")) return true;
			SaveHouseToDatabase(playerid);
		}
	}
	return true;
}

CMD:buyhouse(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(CountPlayerHouses(playerid) != 0) return SendErrorMessage(playerid, "You already own a house.");
	new houseid = 0;
	for(new i = 0; i < MAX_HOUSES; i++)
	{
		if(HouseData[i][HouseID] != 0)
		{
			if(IsPlayerInRangeOfPoint(playerid, 5.0, HouseData[i][HouseExterior][0], HouseData[i][HouseExterior][1], HouseData[i][HouseExterior][2]))
			{
				houseid = i;
			}
		}
	}
	if(houseid == 0) return SendErrorMessage(playerid, "You aren't near to a house that you can buy.");
	if(HouseData[houseid][HouseOwnerSQL] != 0) return SendErrorMessage(playerid, "That house is already owned by someone else.");
	if(PlayerData[playerid][pMoney] < HouseData[houseid][HousePrice]) return SendErrorMessage(playerid, "You cannot afford this house.");

	new string[128];
	format(string, sizeof(string), "[SUCCESS]:{FFFFFF} You have successfully purchased '%s' for $%d!", HouseData[houseid][HouseName], HouseData[houseid][HousePrice]);
	SendClientMessage(playerid, COLOR_GREEN, string);
	GiveCash(playerid, -HouseData[houseid][HousePrice]);
	HouseData[houseid][HouseOwnerSQL] = PlayerData[playerid][pSQLID];
	SaveSQLInt(HouseData[houseid][HouseID], "houses", "OwnerSQL", HouseData[houseid][HouseOwnerSQL]);
	return true;
}