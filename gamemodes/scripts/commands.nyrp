/*
	New York Roleplay
	This file contains server commands, created by Shady.
*/

// Vehicle Commands:
CMD:engine(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "You must be in a vehicle to use this command.");

    new vehicleid = GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
    if(engine == VEHICLE_PARAMS_OFF) SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
    else SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
    return true;
}

// General Commands:
CMD:enter(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(!IsPlayerInAnyVehicle(playerid))
	{
		for(new i = 0; i < MAX_HOUSES; i++)
		{
			if(HouseData[i][HouseID] != 0)
			{
				if(IsPlayerInRangeOfPoint(playerid, 5.0, HouseData[i][HouseExterior][0], HouseData[i][HouseExterior][1], HouseData[i][HouseExterior][2]))
				{
					SetPlayerPos(playerid, HouseData[i][HouseInterior][0], HouseData[i][HouseInterior][1], HouseData[i][HouseInterior][2]);
					SetPlayerFacingAngle(playerid, HouseData[i][HouseInterior][3]);
					SetPlayerInterior(playerid, HouseData[i][HouseInteriorID]);
					SetPlayerVirtualWorld(playerid, HouseData[i][HouseID]);
				}
			}
		}
	}
	return true;
}

CMD:exit(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(!IsPlayerInAnyVehicle(playerid))
	{
		for(new i = 0; i < MAX_HOUSES; i++)
		{
			if(HouseData[i][HouseID] != 0)
			{
				if(GetPlayerVirtualWorld(playerid) == HouseData[i][HouseID])
				{
					if(IsPlayerInRangeOfPoint(playerid, 5.0, HouseData[i][HouseInterior][0], HouseData[i][HouseInterior][1], HouseData[i][HouseInterior][2]))
					{
						SetPlayerPos(playerid, HouseData[i][HouseExterior][0], HouseData[i][HouseExterior][1], HouseData[i][HouseExterior][2]);
						SetPlayerFacingAngle(playerid, HouseData[i][HouseExterior][3]);
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid, 0);
					}
				}
			}
		}
	}
	return true;
}

CMD:commands(playerid, params[]) return cmd_help(playerid, params);
CMD:cmds(playerid, params[]) return cmd_help(playerid, params);
CMD:help(playerid, params[])
{
	SendClientMessage(playerid, COLOR_WHITE, "To be adjusted..");
	return true;
}

CMD:admins(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	SendClientMessage(playerid, COLOR_WHITE, "Administrators Online:");
	foreach(new i: Player)
	{
		if(PlayerData[i][pAdminLevel])
		{
			SendClientMessageEx(playerid, COLOR_GREY, "%s: %s", AdminRank(i), NameRP(i));
		}
		else
		{
			return SendClientMessage(playerid, COLOR_GREY, "There are no administrators' online.");
		}
	}

	return true;
}

CMD:s(playerid, params[]) return cmd_shout(playerid, params);
CMD:shout(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(isnull(params)) return SendUsageMessage(playerid, "/s(hout) [shout message]");

	new string[128];
	format(string, sizeof(string), "%s shouts: %s!", NameRP(playerid), params);
	SendLocalMessageEx(playerid, COLOR_SHOUT, string, 20.0);
	return true;
}

CMD:l(playerid, params[]) return cmd_low(playerid, params);
CMD:low(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(isnull(params)) return SendUsageMessage(playerid, "/l(ow) [low message]");

	new string[128];
	format(string, sizeof(string), "[Quiet] %s says: %s", NameRP(playerid), params);
	SendLocalMessageEx(playerid, COLOR_WHITE, string, 7.6);
	return true;
}

CMD:w(playerid, params[]) return cmd_whisper(playerid, params);
CMD:whisper(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;

	new id, msg[80], string[128];
	if(sscanf(params, "us[80]", id, msg)) return SendUsageMessage(playerid, "/w(hisper) [playerid or name] [whisper message]");
	{
		if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "That player isn't connected.");
		if(!LoggedIn[id]) return SendErrorMessage(playerid, "That player isn't logged in.");

		if(!GetDistanceBetweenPlayers(playerid, id, 3.5)) return SendErrorMessage(playerid, "You must be close to the player in order to whisper them.");
		format(string, sizeof(string), "[Whisper from %s]: %s", NameRP(playerid), msg);
		SendClientMessage(id, COLOR_YELLOW, string);

		format(string, sizeof(string), "[Whisper to %s]: %s", NameRP(id), msg);
		SendClientMessage(playerid, COLOR_YELLOW, string);

		format(string, sizeof(string), "* %s whispers something to %s... *", NameRP(playerid), NameRP(id));
		SendLocalMessage(playerid, COLOR_EMOTE, string);
	}
	return true;
}

CMD:attempt(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(isnull(params)) return SendUsageMessage(playerid, "/attempt [action message]");
	
	new string[128], rand = (0 + random(50));
	
	format(string, sizeof(string), "* %s attempts to %s and ", NameRP(playerid), params);
	switch(rand)
	{
		case 0 .. 25:
		{
			strins(string, "fails...", strlen(string));
		}
		default:
		{
			strins(string, "succeeds...", strlen(string));
		}
	}

	SendLocalMessage(playerid, COLOR_EMOTE, string);
	return true;
}

CMD:b(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(isnull(params)) return SendUsageMessage(playerid, "/b [local OOC message]");

	new string[128];
	format(string, sizeof(string), "(( %s says: %s ))", NameRP(playerid), params);
	SendLocalMessage(playerid, COLOR_WHITE, string);
	return true;
}

CMD:pm(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;

	new id, msg[128], string[128];
	if(sscanf(params, "us[80]", id, msg)) return SendUsageMessage(playerid, "/pm [playerid or name] [message]");
	{
		if(playerid == id) return SendErrorMessage(playerid, "You can't send yourself a private message.");
		if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "That player isn't connected.");
		if(!LoggedIn[id]) return SendErrorMessage(playerid, "That player isn't logged in.");

		format(string, sizeof(string), "** (( PM from %s (id: %d): %s )) **", NameRP(playerid), playerid, msg);
		SendClientMessage(id, COLOR_ORANGE, string);

		format(string, sizeof(string), "** (( PM to %s (id: %d): %s )) **", NameRP(id), id, msg);
		SendClientMessage(playerid, COLOR_ORANGE, string);
	}
	return true;
}

CMD:me(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(isnull(params)) return SendUsageMessage(playerid, "/me [action message]");

	new string[128];
	format(string, sizeof(string), "* %s %s", NameRP(playerid), params);
	SendLocalMessage(playerid, COLOR_EMOTE, string);
	return true;
}

CMD:do(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(isnull(params)) return SendUsageMessage(playerid, "/do [action message]");

	new string[128];
	format(string, sizeof(string), "* %s (( %s ))", params, NameRP(playerid));
	SendLocalMessage(playerid, COLOR_EMOTE, string);
	return true;
}

CMD:ame(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(isnull(params)) return SendUsageMessage(playerid, "/ame [annotated action message]");

	SetPlayerChatBubble(playerid, params, COLOR_EMOTE, 15.0, 10000);

	new string[128];
	format(string, sizeof(string), "* Annotated message: %s", params);
	SendClientMessage(playerid, COLOR_EMOTE, string);
	return true;
}

CMD:injuries(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	new id;
	if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/injuries [playerid or name]");
	{
		if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "That player isn't connected.");
		if(!LoggedIn[id]) return SendErrorMessage(playerid, "That player isn't logged in.");
		if(!GetDistanceBetweenPlayers(playerid, id, 5.0)) return SendErrorMessage(playerid, "You must be close to the player in order to whisper them.");
		DisplayDamageData(id, playerid);
	}
	return true;
}

CMD:rules(playerid, params[])
{
	new vstr[5120];
	if(!LoggedIn[playerid]) return true;
	format(vstr, sizeof(vstr), "{FFFFFF}Please read the following rules, breaking them may result in a kick/prison/ban/fine.\n\n");
	strins(vstr, "- {FF0000}Hacking{FFFFFF} - Using third party software that gives you an unfair advantage.\n", strlen(vstr));
	strins(vstr, "- {FF0000}Money Farming{FFFFFF} - Transfering money from an alternative account onto a main.\n", strlen(vstr));
	strins(vstr, "- {FF0000}Account Sharing{FFFFFF} - The account is yours and only yours.\n", strlen(vstr));
	strins(vstr, "- {FF0000}Server Advertising{FFFFFF} - Messages with IP addresses / advertisements for a server is not acceptable.\n", strlen(vstr));
	strins(vstr, "- {FF0000}Scamming Donations{FFFFFF} - Decieving others into paying you for a donation you charge-back / don't fulfill.\n", strlen(vstr));
	strins(vstr, "- {FF0000}Creating Alts to Avoid{FFFFFF} - Using alternative accounts to avoid admin punishment.\n\n", strlen(vstr));
	strins(vstr, "- {FF9900}Metagaming{FFFFFF} - Using information obtained out of characterly in character.\n", strlen(vstr));
	strins(vstr, "- {FF9900}Deathmatching{FFFFFF} - Killing someone without an in character reason.\n", strlen(vstr));
	strins(vstr, "- {FF9900}Killing on Sight{FFFFFF} - Killing someone on sight.\n", strlen(vstr));
	strins(vstr, "- {FF9900}Powergaming{FFFFFF} - Roleplaying something unrealistic / impossible & forcing roleplay onto others.\n", strlen(vstr));
	strins(vstr, "- {FF9900}Avoiding Roleplay{FFFFFF} - Failure to comply with any roleplay that you are engaged in.\n", strlen(vstr));
	strins(vstr, "- {FF9900}Non-RP Behaviour{FFFFFF} - Decisions that do not seem reasonable in a roleplay server.\n", strlen(vstr));
	strins(vstr, "- {FF9900}Non-RP Driving{FFFFFF} - Driving in an unreasonable way.\n", strlen(vstr));
	strins(vstr, "- {FF9900}Car Ramming/Parking{FFFFFF} - Intentionally using a car as a weapon.\n", strlen(vstr));
	strins(vstr, "- {FF9900}Chicken Running{FFFFFF} - Running unreasonably during a gunfight to prevent being shot.\n", strlen(vstr));
	strins(vstr, "- {FF9900}Quickswapping/Crackshooting{FFFFFF} - Using any exploit to speed up the reload / shooting time of any weapon.\n", strlen(vstr));
	strins(vstr, "- {FF9900}Logging/Tabbing to Avoid{FFFFFF} - Exiting / minimizing your game to avoid roleplay you're engaged in.\n", strlen(vstr));
	strins(vstr, "- {FF9900}Forcing a Game Crash{FFFFFF} - Exploiting features to force your client to time-out.\n", strlen(vstr));
	strins(vstr, "- {FF9900}Healing/Vesting During A Gunfight{FFFFFF} - Using any feature to heal during a gunfight.\n", strlen(vstr));
	strins(vstr, "- {FF9900}Scamming Above Limit{FFFFFF} - Scamming over the set limit is not allowed.\n", strlen(vstr));
	strins(vstr, "- {FF9900}Robbing Above Limit{FFFFFF} - Robbing over the set limit is not allowed.\n", strlen(vstr));
	strins(vstr, "- {FF9900}Scamming/Robbing Newbies{FFFFFF} - Scamming / Robbing a level 1-3.\n", strlen(vstr));
	strins(vstr, "- {FF9900}Ninja Jacking{FFFFFF} - Exploiting the hijack-kill glitch in SA:MP.\n", strlen(vstr));
	strins(vstr, "- {FF9900}Heliblading/Carbombing/Planebombing{FFFFFF} - Using the blades / explosions to kill players.\n", strlen(vstr));
	strins(vstr, "- {FF9900}Releasing Secret Information{FFFFFF} - Releasing secret infomation (hitman, etc).\n", strlen(vstr));
	strins(vstr, "- {FF9900}Insulting/Disrespecting Admins{FFFFFF} - Harassing the admins.\n", strlen(vstr));
	strins(vstr, "- {FF9900}Lying to Admins / Interfering with admin work{FFFFFF} - Lying / deceiving admins.\n", strlen(vstr));
	strins(vstr, "- {FF9900}Out Of Character Contracting{FFFFFF} - Using /contract on a player for no in character reason.\n", strlen(vstr));
	strins(vstr, "- {FF9900}Running man (AFK Kicker){FFFFFF} - Circumventing the auto AFK kicker.\n", strlen(vstr));
	strins(vstr, "- {FF9900}Exploiting{FFFFFF} - Using a feature to gain an advantage over others.\n", strlen(vstr));
	strins(vstr, "- {FF9900}Trolling{FFFFFF} - If you cross the line you can get {FF0000}permanently banned{FFFFFF}.\n\n", strlen(vstr));
	strins(vstr, "{FFFFFF}Legend: {FF0000}High Offense{FFFFFF} | {FF9900}Medium Offense\n", strlen(vstr));
	strins(vstr, "{FFFFFF}Please read all the rules at our website. Punishments can also vary on level.\n\n", strlen(vstr));
	ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, "Server Rules", vstr, "Okay", "");
	return true;
}

CMD:credits(playerid, params[])
{
	new string[230];
	if(!LoggedIn[playerid]) return true;
	strcat(string, "New York Roleplay would like to take the time to mention the following members\n");
	strcat(string, "and behalf of that, giving them some credit for their appreciated contribution\n");
	strcat(string, "to our wonderful server.\n\n");
	strcat(string, "{1ABC9C}Shady{FFFFFF} - Owner & Scripter\n");
	ShowPlayerDialog(playerid, DIALOG_CREDITS, DIALOG_STYLE_MSGBOX, "Server Credits", string, "Close", "");
	return true;
}

// Account Commands:
CMD:stats(playerid, params[])
{
	new playerb;
	if(PlayerData[playerid][pAdminLevel])
	{
		if (sscanf(params, "I(-1)", playerb)) return 1;
		if(playerb == -1)
		{
			return ShowStats(playerid, playerid);
		}
		else
		{
			if(!IsPlayerConnected(playerb)) return SendErrorMessage(playerid, "The player you specified isn't connected.");
			if(!LoggedIn[playerid]) return SendErrorMessage(playerid, "The player you specified isn't logged in.");
			ShowStats(playerb, playerid);
		}
	}
	else return ShowStats(playerid, playerid);
	return 1;
}

CMD:buylevel(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	new curLevel = PlayerData[playerid][pLevel], curRespect = PlayerData[playerid][pRespect], needed = 0, string[128];

	needed = (curLevel * 5);
	if(curRespect < needed) return SendErrorMessage(playerid, "You do not have enough respect points in order to level up.");
	
	PlayerData[playerid][pLevel] ++;
	PlayerData[playerid][pRespect] -= needed;

	SaveSQLInt(PlayerData[playerid][pSQLID], "players", "Level", PlayerData[playerid][pLevel]);
	SaveSQLInt(PlayerData[playerid][pSQLID], "players", "Respect", PlayerData[playerid][pRespect]);
	SetPlayerScore(playerid, PlayerData[playerid][pLevel]);

	format(string, sizeof(string), "[SUCCESS]:{FFFFFF} You have levelled up to level %d [Respect Points Left: %d]", PlayerData[playerid][pLevel], PlayerData[playerid][pRespect]);
	SendClientMessage(playerid, COLOR_GREEN, string);
	return true;
}

CMD:changeage(playerid, params[])
{
   	new str[128], value;
   	if(!LoggedIn[playerid]) return true;
    if(sscanf(params, "i", value)) return SendUsageMessage(playerid, "/changeage [age]");
	if(value < 18 || value > 61) return SendErrorMessage(playerid, "Age must be above 18 OR below 61.");
	PlayerData[playerid][pAge] = value;
	SaveSQLInt(PlayerData[playerid][pSQLID], "players", "Age", PlayerData[playerid][pAge]);
	format(str, sizeof(str), "[SUCCESS]:{FFFFFF} You've successfully changed your age to %d.", value);
	SendClientMessage(playerid, COLOR_GREEN, str);
	return true;
}

CMD:changesex(playerid, params[])
{
   	new str[128], value;
   	if(!LoggedIn[playerid]) return true;
    if(sscanf(params, "i", value)) return SendUsageMessage(playerid, "/changesex [male (1) or female (2)]");
	if(value < 1 || value > 2) return SendErrorMessage(playerid, "Gender must be either Male [ID 1] OR Female [ID 2].");
	if(value == 1)
	{
		PlayerData[playerid][pSex] = value;
		SaveSQLInt(PlayerData[playerid][pSQLID], "players", "Gender", PlayerData[playerid][pSex]);
		format(str, sizeof(str), "[SUCCESS]:{FFFFFF} You've successfully changed your gender to Male.");
		SendClientMessage(playerid, COLOR_GREEN, str);
	}
	if(value == 2)
	{
		PlayerData[playerid][pSex] = value;
		SaveSQLInt(PlayerData[playerid][pSQLID], "players", "Gender", PlayerData[playerid][pSex]);
		format(str, sizeof(str), "[SUCCESS]:{FFFFFF} You've successfully changed your gender to Female.");
		SendClientMessage(playerid, COLOR_GREEN, str);
	}
	return true;
}

// Administrator Commands:
CMD:ah(playerid, params[]) return cmd_ahelp(playerid, params);
CMD:acmds(playerid, params[]) return cmd_ahelp(playerid, params);
CMD:ahelp(playerid, params[])
{
	if(PlayerData[playerid][pAdminLevel])
	{
		SendClientMessage(playerid, COLOR_WHITE, "To be adjusted..");
	}
	else SendUnauthorizedMsg(playerid);
	return true;
}

CMD:makeadmin(playerid, params[])
{
   	new str[128], playerb, value;
    if(PlayerData[playerid][pAdminLevel] < 4 && !IsPlayerAdmin(playerid)) return SendUnauthorizedMsg(playerid);
    if(sscanf(params, "ui", playerb, value)) return SendUsageMessage(playerid, "/makeadmin [playerid/partofname] [level 1-4]");
	if(value < 0 || value > 4) return SendErrorMessage(playerid, "Invalid administrator level, 0-4.");
    if(value == 0)
    {
		PlayerData[playerb][pAdminLevel] = value;
		SaveSQLInt(PlayerData[playerb][pSQLID], "players", "AdminLevel", PlayerData[playerb][pAdminLevel]);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You've been kicked from the Administration Team by %s.", NameRP(playerid));
		SendClientMessage(playerb, COLOR_LIGHTRED, str);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You have kicked %s from the Administration Team.", NameRP(playerb));
		SendClientMessage(playerid, COLOR_LIGHTRED, str);
        return true;
	}
	if(value == 1)
	{
		PlayerData[playerb][pAdminLevel] = value;
		SaveSQLInt(PlayerData[playerb][pSQLID], "players", "AdminLevel", PlayerData[playerb][pAdminLevel]);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You've been made a Probationary Administrator (level %i) by %s.", value, NameRP(playerid));
		SendClientMessage(playerb, COLOR_LIGHTRED, str);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You have set %s's admin level to Probationary Administrator.", NameRP(playerb));
		SendClientMessage(playerid, COLOR_LIGHTRED, str);
	}
	if(value == 2)
	{
		PlayerData[playerb][pAdminLevel] = value;
		SaveSQLInt(PlayerData[playerb][pSQLID], "players", "AdminLevel", PlayerData[playerb][pAdminLevel]);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You've been made an Administrator (level %i) by %s.", value, NameRP(playerid));
		SendClientMessage(playerb, COLOR_LIGHTRED, str);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You have set %s's admin level to Administrator.", NameRP(playerb));
		SendClientMessage(playerid, COLOR_LIGHTRED, str);
	}
	if(value == 3)
	{
		PlayerData[playerb][pAdminLevel] = value;
		SaveSQLInt(PlayerData[playerb][pSQLID], "players", "AdminLevel", PlayerData[playerb][pAdminLevel]);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You've been made a Lead Administrator (level %i) by %s.", value, NameRP(playerid));
		SendClientMessage(playerb, COLOR_LIGHTRED, str);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You have set %s's admin level to Lead Administrator.", NameRP(playerb));
		SendClientMessage(playerid, COLOR_LIGHTRED, str);
	}
	if(value == 4)
	{
		PlayerData[playerb][pAdminLevel] = value;
		SaveSQLInt(PlayerData[playerb][pSQLID], "players", "AdminLevel", PlayerData[playerb][pAdminLevel]);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You've been made a Management (level %i) by %s.", value, NameRP(playerid));
		SendClientMessage(playerb, COLOR_LIGHTRED, str);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You have set %s's admin level to Management.", NameRP(playerb));
		SendClientMessage(playerid, COLOR_LIGHTRED, str);
	}
	return true;
}

CMD:makedonator(playerid, params[])
{
   	new str[128], playerb, value;
    if(PlayerData[playerid][pAdminLevel] < 4) return SendUnauthorizedMsg(playerid);
    if(sscanf(params, "ui", playerb, value)) return SendUsageMessage(playerid, "/makedonator [playerid/partofname] [donator level 1-3]");
	if(value < 0 || value > 3) return SendErrorMessage(playerid, "Invalid donator level, 0-3.");
    if(value == 0)
    {
		PlayerData[playerb][pDonator] = value;
		SaveSQLInt(PlayerData[playerb][pSQLID], "players", "Donator", PlayerData[playerb][pDonator]);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} Your donator status has been revoked by %s", NameRP(playerid));
		SendClientMessage(playerb, COLOR_LIGHTRED, str);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You have revoked %s's donator status.", NameRP(playerb));
		SendClientMessage(playerid, COLOR_LIGHTRED, str);
        return true;
	}
	if(value == 1)
	{
		PlayerData[playerb][pDonator] = value;
		SaveSQLInt(PlayerData[playerb][pSQLID], "players", "Donator", PlayerData[playerb][pDonator]);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You've been made a Ruby Donator (level %i) by %s", value, NameRP(playerid));
		SendClientMessage(playerb, COLOR_LIGHTRED, str);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You have set %s's donator status to Ruby Donator.", NameRP(playerb));
		SendClientMessage(playerid, COLOR_LIGHTRED, str);
	}
	if(value == 2)
	{
		PlayerData[playerb][pDonator] = value;
		SaveSQLInt(PlayerData[playerb][pSQLID], "players", "Donator", PlayerData[playerb][pDonator]);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You've been made a Sapphire Donator (level %i) by %s", value, NameRP(playerid));
		SendClientMessage(playerb, COLOR_LIGHTRED, str);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You have set %s's donator status to Sapphire Donator.", NameRP(playerb));
		SendClientMessage(playerid, COLOR_LIGHTRED, str);
	}
	if(value == 3)
	{
		PlayerData[playerb][pDonator] = value;
		SaveSQLInt(PlayerData[playerb][pSQLID], "players", "Donator", PlayerData[playerb][pDonator]);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You've been made a Diamond Donator (level %i) by %s", value, NameRP(playerid));
		SendClientMessage(playerb, COLOR_LIGHTRED, str);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You have set %s's donator status to Diamond Donator.", NameRP(playerb));
		SendClientMessage(playerid, COLOR_LIGHTRED, str);
	}
	return true;
}

CMD:maketester(playerid, params[])
{
   	new str[128], playerb, value;
    if(PlayerData[playerid][pAdminLevel] < 4 && PlayerData[playerid][pTester] < 2) return SendUnauthorizedMsg(playerid);
    if(sscanf(params, "ui", playerb, value)) return SendUsageMessage(playerid, "/maketester [playerid/partofname] [tester level 1-2].");
	if(value < 0 || value > 3) return SendErrorMessage(playerid, "Invalid tester level, 0-2.");
    if(value == 0)
    {
		PlayerData[playerb][pTester] = value;
		SaveSQLInt(PlayerData[playerb][pSQLID], "players", "Tester", PlayerData[playerb][pTester]);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} Your tester status has been revoked by %s", NameRP(playerid));
		SendClientMessage(playerb, COLOR_LIGHTRED, str);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You have revoked %s's tester status.", NameRP(playerb));
		SendClientMessage(playerid, COLOR_LIGHTRED, str);
        return true;
	}
	if(value == 1)
	{
		PlayerData[playerb][pTester] = value;
		SaveSQLInt(PlayerData[playerb][pSQLID], "players", "Tester", PlayerData[playerb][pTester]);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You've been made a Tester (level %i) by %s", value, NameRP(playerid));
		SendClientMessage(playerb, COLOR_LIGHTRED, str);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You have set %s's tester level to Tester.", NameRP(playerb));
		SendClientMessage(playerid, COLOR_LIGHTRED, str);
	}
	if(value == 2)
	{
		if(PlayerData[playerid][pTester] == 2) return SendErrorMessage(playerid, "You are not authorized to set tester's level to 'Lead'.");
		PlayerData[playerb][pTester] = value;
		SaveSQLInt(PlayerData[playerb][pSQLID], "players", "Tester", PlayerData[playerb][pTester]);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You've been made a Lead Tester (level %i) by %s", value, NameRP(playerid));
		SendClientMessage(playerb, COLOR_LIGHTRED, str);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You have set %s's tester level to Lead Tester.", NameRP(playerb));
		SendClientMessage(playerid, COLOR_LIGHTRED, str);
	}
	return true;
}

CMD:gotopoint(playerid, params[])
{
	if(!PlayerData[playerid][pAdminLevel]) return SendUnauthorizedMsg(playerid);
	new	Float:x, Float:y, Float:z, interior;
	if(sscanf(params, "fffi", x, y, z, interior)) return SendUsageMessage(playerid, "/gotopoint [x] [y] [z] [interior id]");
	SetPlayerPos(playerid, x, y, z);
	SetPlayerInterior(playerid, interior);
	return true;
}