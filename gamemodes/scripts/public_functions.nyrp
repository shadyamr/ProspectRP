/*
	New York Roleplay
	This file contains public functions, created by Shady.
*/

Server:SaveSQLInt(sqlid, table[], row[], value)
{
	new query[512];
	mysql_format(sqlConnection, query, sizeof(query), "UPDATE %e SET %e = %i WHERE id = %i", table, row, value, sqlid);
	mysql_pquery(sqlConnection, query);
	return true;
}

Server:DefaultPlayerValues(playerid)
{
	LoggedIn[playerid] = false;
	PlayerData[playerid][pSQLID] = 0;
	PlayerData[playerid][pAdminLevel] = 0;
	PlayerData[playerid][pHelper] = 0;
	PlayerData[playerid][pTester] = 0;
	PlayerData[playerid][pMoney] = 0;
	PlayerData[playerid][pLevel] = 1;
	PlayerData[playerid][pRespect] = 0;
	PlayerData[playerid][pSkin] = 299;
	PlayerData[playerid][pHealth] = 100;
	PlayerData[playerid][pArmour] = 0;
	ResetDamageData(playerid);
	return true;
}

Server:DoesPlayerExist(playerid)
{
	new query[512];
	mysql_format(sqlConnection, query, sizeof(query), "SELECT id FROM players WHERE Name = '%e' LIMIT 1", GetName(playerid));
	mysql_pquery(sqlConnection, query, "SQL_DoesPlayerExist", "i", playerid);
	return true;
}

Server:SQL_DoesPlayerExist(playerid)
{
	if(cache_num_rows(sqlConnection) != 0)
	{
		ShowLoginDialog(playerid, "");
	}
	else
	{
		ShowRegisterDialog(playerid, "");
	}
	SetPlayerPos(playerid, -206.8355, 1120.8429, 14.7422);
	SetPlayerCameraLookAt(playerid, -206.8355, 1120.8429, 19.7422);
	SetPlayerCameraPos(playerid, -109.4670, 1133.6563, 70.2519);
	TogglePlayerSpectating(playerid, true);

	// cam pos = -109.4670, 1133.6563, 70.2519
	// camlookat & playerpos = -206.8355, 1120.8429, 14.7422
	return true;
}

Server:TIMER_SetCameraPos(playerid)
{
	SetPlayerPos(playerid, -206.8355, 1120.8429, 14.7422);
	SetPlayerCameraLookAt(playerid, -206.8355, 1120.8429, 19.7422);
	SetPlayerCameraPos(playerid, -109.4670, 1133.6563, 70.2519);
	// cam pos = -109.4670, 1133.6563, 70.2519
	// camlookat & playerpos = -206.8355, 1120.8429, 14.7422
	return true;
}

Server:ShowLoginDialog(playerid, error[])
{
	if(LoggedIn[playerid]) return true;
	if(!strmatch(error, ""))
	{
		SendClientMessage(playerid, COLOR_RED, error);
	}

	new title[60];
    new msgstring[110];
    format(title, sizeof(title), "{FFFFFF}New York Roleplay - Login");
    format(msgstring, sizeof(msgstring), "{FFFFFF}That username is registered, please enter your password below.\n\n{969696}Choose a Password:", msgstring);
	ShowLoginScreenTextDraw(playerid);
	ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, title, msgstring, "Login", "Quit");
	return true;
}

Server:ShowRegisterDialog(playerid, error[])
{
	if(LoggedIn[playerid]) return true;
	if(!strmatch(error, ""))
	{
		SendClientMessage(playerid, COLOR_RED, error);
	}

	new title[60];
    new msgstring[110];
    format(title, sizeof(title), "{FFFFFF}New York Roleplay - Registration");
    format(msgstring, sizeof(msgstring), "{FFFFFF}You may register this username by entering your desired password below.\n\n{969696}Choose a Password:", msgstring);
	ShowLoginScreenTextDraw(playerid);
	ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, title, msgstring, "Register", "Quit");
	return true;
}

Server:SQL_OnAccountLogin(playerid)
{
	if(cache_num_rows() == 0)
	{
		ShowLoginDialog(playerid, "[Error]:{FFFFFF} You have entered incorrect password.");
		return true;
	}

	PlayerData[playerid][pSQLID] = cache_get_field_content_int(0, "id", sqlConnection);
	LoadPlayerData(playerid);
	new string[256];
	SendSuccessMessage(playerid, "You have successfully logged in to the server!");
	
	format(string, sizeof(string), "Player Level: %d | Admin Level: %d | Respect Points: %d", PlayerData[playerid][pLevel], PlayerData[playerid][pAdminLevel], PlayerData[playerid][pRespect]);
	SendClientMessage(playerid, COLOR_SERVER, string);
	return true;
}

Server:LoadPlayerData(playerid)
{
	new query[512];
	mysql_format(sqlConnection, query, sizeof(query), "SELECT * FROM players WHERE id = %i LIMIT 1", PlayerData[playerid][pSQLID]);
	mysql_pquery(sqlConnection, query, "SQL_OnLoadAccount", "i", playerid);
	return true;
}

Server:SQL_OnLoadAccount(playerid)
{
	LoggedIn[playerid] = true;

	PlayerData[playerid][pRegisterDate] = cache_get_field_content_int(16, "RegDate", sqlConnection);
	PlayerData[playerid][pAdminLevel] = cache_get_field_content_int(0, "AdminLevel", sqlConnection);
	PlayerData[playerid][pHelper] = cache_get_field_content_int(0, "Helper", sqlConnection);
	PlayerData[playerid][pTester] = cache_get_field_content_int(0, "Tester", sqlConnection);
	PlayerData[playerid][pMoney] = cache_get_field_content_int(0, "Money", sqlConnection);
	PlayerData[playerid][pLevel] = cache_get_field_content_int(0, "Level", sqlConnection);
	PlayerData[playerid][pRespect] = cache_get_field_content_int(0, "Respect", sqlConnection);
	PlayerData[playerid][pLastPos][0] = cache_get_field_content_float(0, "LastX", sqlConnection);
	PlayerData[playerid][pLastPos][1] = cache_get_field_content_float(0, "LastY", sqlConnection);
	PlayerData[playerid][pLastPos][2] = cache_get_field_content_float(0, "LastZ", sqlConnection);
	PlayerData[playerid][pLastPos][3] = cache_get_field_content_float(0, "LastRot", sqlConnection);
	PlayerData[playerid][pLastInt] = cache_get_field_content_int(0, "Interior", sqlConnection);
	PlayerData[playerid][pLastWorld] = cache_get_field_content_int(0, "World", sqlConnection);
	PlayerData[playerid][pSkin] = cache_get_field_content_int(0, "Skin", sqlConnection);
	PlayerData[playerid][pHealth] = cache_get_field_content_float(0, "Health", sqlConnection);
	PlayerData[playerid][pArmour] = cache_get_field_content_float(0, "Armour", sqlConnection);

	SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
	SetPlayerScore(playerid, PlayerData[playerid][pLevel]);
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, PlayerData[playerid][pMoney]);
	SetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
	SetPlayerArmour(playerid, PlayerData[playerid][pArmour]);
	TogglePlayerSpectating(playerid, false);
	SetPlayerSpawn(playerid);
	SetPlayerColor(playerid, 0xFFFFFFFF);
	HideLoginScreenTextDraw(playerid);
	return true;
}

Server:TIMER_OneSecondTimer()
{
	foreach(Player, i)
	{
		if(LoggedIn[i])
		{
			lastSaveTime++;
			if(lastSaveTime < 5 )
			{
				SavePlayer(i, false);
			}
			else
			{
				SavePlayer(i, true);
				lastSaveTime = 0;
			}
		}
	}
	return true;
}

Server:SavePlayer(playerid, bool:save)
{
	GetPlayerPos(playerid, PlayerData[playerid][pLastPos][0], PlayerData[playerid][pLastPos][1], PlayerData[playerid][pLastPos][2]);
	GetPlayerFacingAngle(playerid, PlayerData[playerid][pLastPos][3]);
	GetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
	GetPlayerArmour(playerid, PlayerData[playerid][pArmour]);

	PlayerData[playerid][pLastInt] = GetPlayerInterior(playerid);
	PlayerData[playerid][pLastWorld] = GetPlayerVirtualWorld(playerid);
	PlayerData[playerid][pSkin] = GetPlayerSkin(playerid);

	if(save)
	{
		new query[512];
		mysql_format(sqlConnection, query, sizeof(query), "UPDATE players SET LastX = %f, LastY = %f, LastZ = %f, LastRot = %f, Interior = %i, World = %i, Skin = %i, Health = %f, Armour = %f WHERE id = %i LIMIT 1",
		PlayerData[playerid][pLastPos][0], PlayerData[playerid][pLastPos][1], PlayerData[playerid][pLastPos][2], PlayerData[playerid][pLastPos][3],
		PlayerData[playerid][pLastInt], PlayerData[playerid][pLastWorld], PlayerData[playerid][pSkin], PlayerData[playerid][pHealth], PlayerData[playerid][pArmour], PlayerData[playerid][pSQLID]);
		mysql_pquery(sqlConnection, query);
	}
	return true;
}

Server:SetPlayerSpawn(playerid)
{
	SetSpawnInfo(playerid, 0, PlayerData[playerid][pSkin], PlayerData[playerid][pLastPos][0], PlayerData[playerid][pLastPos][1], PlayerData[playerid][pLastPos][2], PlayerData[playerid][pLastPos][3], 0, 0, 0, 0, 0, 0);
	SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
	SpawnPlayer(playerid);
	SetPlayerVirtualWorld(playerid, PlayerData[playerid][pLastWorld]);
	SetPlayerInterior(playerid, PlayerData[playerid][pLastInt]);
	return true;
}

Server:SQL_OnAccountRegister(playerid)
{
	new string[256];
	SendSuccessMessage(playerid, "You have successfully logged in to the server!");

	format(string, sizeof(string), "Player Level: %d | Admin Level: %d | Respect Points: %d", PlayerData[playerid][pLevel], PlayerData[playerid][pAdminLevel], PlayerData[playerid][pRespect]);
	SendClientMessage(playerid, COLOR_SERVER, string);
	displayWelcomeMessage(playerid);
	SetTimerEx("removeWelcomeMessage", 15000, false, "i", playerid);
	DefaultPlayerValues(playerid);
	PlayerData[playerid][pSQLID] = cache_insert_id();
	LoadPlayerData(playerid);
	return true;
}

Server:GetDistanceBetweenPlayers(playerid, id, Float:distance)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	foreach(Player, i)
	{
		if(LoggedIn[id] && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(id) && GetPlayerInterior(playerid) == GetPlayerInterior(id))
		{
			if(IsPlayerInRangeOfPoint(id, distance, x, y, z))
			{
				return true;
			}
		}
	}
	return false;
}

Server:SendLocalMessage(playerid, color, msg[])
{
	if(!LoggedIn[playerid]) return true;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	foreach(Player, i)
	{
		if(LoggedIn[i])
		{
			if(IsPlayerInRangeOfPoint(i, 15.0, x, y, z) && GetPlayerInterior(i) == GetPlayerInterior(playerid) && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
			{
				SendClientMessage(i, color, msg);
			}
		}
	}
	return true;
}

Server:SendLocalMessageEx(playerid, color, msg[], Float:distance)
{
	if(!LoggedIn[playerid]) return true;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	foreach(Player, i)
	{
		if(LoggedIn[i])
		{
			if(IsPlayerInRangeOfPoint(i, distance, x, y, z) && GetPlayerInterior(i) == GetPlayerInterior(playerid) && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
			{
				SendClientMessage(i, color, msg);
			}
		}
	}
	return true;
}

Server:UpdateNametag()
{
	foreach(new i : Player)
	{
        if(IsPlayerConnected(i))
        {
            new nametag[512], Float:armour;
            GetPlayerArmour(i, armour);
			if(armour > 1.0)
			{
				format(nametag, sizeof(nametag), "{%06x}%s {FFFFFF}(%i)\n{FFFFFF}%s\n{FF0000}%s", GetPlayerColor(i) >>> 8, NameRP(i), i, GetArmorDots(i), GetHealthDots(i));
			}
			else
			{
				format(nametag, sizeof(nametag), "{%06x}%s {FFFFFF}(%i)\n{FF0000}%s", GetPlayerColor(i) >>> 8, NameRP(i), i, GetHealthDots(i));
			}
			UpdateDynamic3DTextLabelText(cNametag[i], 0xFFFFFFFF, nametag);
		}
	}
}

GetDamageType(weaponid)
{
	new damageType[25] = EOS;
		
	switch(weaponid)
	{
		case 0 .. 3, 5 .. 7, 10 .. 15:damageType = "Blunt Trauma";
		case 4, 8, 9:damageType = "Stab Wound";
		case 22 .. 34:damageType = "Gunshot Wound";
		case 18, 35, 36, 37, 16, 39, 40:damageType = "Explosive/Burn Wound";
		default:damageType = "Unknown Wound";
	}

	return damageType;
}

Server:ResetDamageData(playerid)
{
	for(new i = 0; i < MAX_DAMAGES; i++)
	{
		if(DamageData[i][DamagePlayerID] == playerid)
		{
			DamageData[i][DamagePlayerID] = INVALID_PLAYER_ID;
			DamageData[i][DamageWeapon] = INVALID_WEAPON_ID;
			DamageData[i][DamageBodypart] = 0;
			DamageData[i][DamageAmount] = 0.0;
		}
	}
	return true;
}

Server:SaveDamageData(playerid, weaponid, bodypart, Float:amount)
{
	totalDamages ++;
	new i = totalDamages;

	DamageData[i][DamagePlayerID] = playerid;
	DamageData[i][DamageWeapon] = weaponid;
	DamageData[i][DamageBodypart] = bodypart;
	DamageData[i][DamageAmount] = amount;
	return true;
}

GetBoneDamaged(bodypart)
{
	new bodypartR[20] = EOS;
	switch(bodypart)
	{
		case BODY_PART_TORSO:bodypartR = "Torso";
		case BODY_PART_GROIN:bodypartR = "Groin";
		case BODY_PART_LEFT_ARM:bodypartR = "Left Arm";
		case BODY_PART_RIGHT_ARM:bodypartR = "Right Arm";
		case BODY_PART_LEFT_LEG:bodypartR = "Left Leg";
		case BODY_PART_RIGHT_LEG:bodypartR = "Right Leg";
		case BODY_PART_HEAD:bodypartR = "Head";
	}
	return bodypartR;
}

Server:DisplayDamageData(playerid, forplayerid)
{
	new count = 0;
	for(new i = 0; i < MAX_DAMAGES; i++)
	{
		if(DamageData[i][DamagePlayerID] == playerid)
		{
			count++;
		}
	}

	new longstr[512] = EOS, weaponname[20] = EOS;
	if(!count) return SendServerMessage(forplayerid, "That player hasn't been injured.");
	for(new i = 0; i < MAX_DAMAGES; i++)
	{
		if(DamageData[i][DamagePlayerID] == playerid)
		{
			GetWeaponName(DamageData[i][DamageWeapon], weaponname, sizeof(weaponname));
			format(longstr, sizeof(longstr), "%s{FFFFFF} (%s - %s) %s\n", longstr, GetDamageType(DamageData[i][DamageWeapon]), GetBoneDamaged(DamageData[i][DamageBodypart]), weaponname);
		}
	}
	ShowPlayerDialog(playerid, DIALOG_DAMAGE, DIALOG_STYLE_LIST, "{FF0000}Damage Information", longstr, "Ok", "");
	return true;
}

Server:removeWelcomeMessage(playerid)
{
	for(new i; i < 9; i++)
	{
		TextDrawHideForPlayer(playerid, TDEditor_TD[i]);
	}
	return true;
}

Server:KickPlayer(playerid)
{
	Kick(playerid);
}

/*Server:hideCenterHUDInfo(playerid)
{
	TextDrawHideForPlayer(playerid, centerHUDInfo[playerid]);
	displayingText[playerid] = 0;
}*/