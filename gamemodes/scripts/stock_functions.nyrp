/*
	New York Roleplay
	This file contains stock and other functions, created by Shady.
*/

GetName(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	return name;
}

GetIP(playerid)
{
	new ip[20];
	GetPlayerIp(playerid, ip, sizeof(ip));
	return ip;
}

NameRP(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	for(new i = 0; i < strlen(name); i++)
	{
		if(name[i] == '_')
		{
			name[i] = ' ';
		}
	}
	return name;
}

strmatch(const String1[], const String2[])
{
    if ((strcmp(String1, String2, true, strlen(String2)) == 0) && (strlen(String2) == strlen(String1)))
    {
        return true;
    }
    else
    {
        return false;
    }
}

GetHealthDots(playerid)
{
	new dots[64];
	new Float:HP;

	GetPlayerHealth(playerid, HP);

	if(HP == 100)
	    dots = "••••••••••";
	else if(HP >= 90 && HP < 100)
	    dots = "•••••••••{660000}•";
    else if(HP >= 80 && HP < 90)
	    dots = "••••••••{660000}••";
    else if(HP >= 70 && HP < 80)
	    dots = "•••••••{660000}•••";
	else if(HP >= 60 && HP < 70)
	    dots = "••••••{660000}••••";
	else if(HP >= 50 && HP < 60)
	    dots = "•••••{660000}•••••";
	else if(HP >= 40 && HP < 50)
	    dots = "••••{660000}••••••";
	else if(HP >= 30 && HP < 40)
	    dots = "•••{660000}•••••••";
	else if(HP >= 20 && HP < 30)
	    dots = "••{660000}••••••••";
	else if(HP >= 10 && HP < 20)
	    dots = "••{660000}••••••••";
	else if(HP >= 0 && HP < 10)
	    dots = "{660000}••••••••••";

	return dots;
}

GetArmorDots(playerid)
{
	new dots[64];
	new Float:AR;

	GetPlayerArmour(playerid, AR);

	if(AR == 100)
	    dots = "••••••••••";
	else if(AR >= 90 && AR < 100)
	    dots = "•••••••••{666666}•";
    else if(AR >= 80 && AR < 90)
	    dots = "••••••••{666666}••";
    else if(AR >= 70 && AR < 80)
	    dots = "•••••••{666666}•••";
	else if(AR >= 60 && AR < 70)
	    dots = "••••••{666666}••••";
	else if(AR >= 50 && AR < 60)
	    dots = "•••••{666666}•••••";
	else if(AR >= 40 && AR < 50)
	    dots = "••••{666666}••••••";
	else if(AR >= 30 && AR < 40)
	    dots = "•••{666666}•••••••";
	else if(AR >= 20 && AR < 30)
	    dots = "••{666666}••••••••";
	else if(AR >= 10 && AR < 20)
	    dots = "••{666666}••••••••";
	else if(AR >= 0 && AR < 10)
	    dots = "{666666}••••••••••";

	return dots;
}

ShowLoginScreenTextDraw(playerid, bool:showTextdraw = true)
{
	if(showTextdraw)
	{
		for(new i = 0; i < 3; i++)
		{
			PlayerTextDrawShow(playerid, LoginScreen[playerid][i]);
		}
	}
	return true;
}

HideLoginScreenTextDraw(playerid)
{
	for(new i = 0; i < 3; i++)
		{
			PlayerTextDrawHide(playerid, LoginScreen[playerid][i]);
		}
	return true;
}

displayWelcomeMessage(playerid)
{
	for(new i; i < 9; i++)
	{
		TextDrawShowForPlayer(playerid, TDEditor_TD[i]);
	}
	return true;
}

KickEx(playerid)
{
	SetTimerEx("KickPlayer", 1000, false, "i", playerid);
	return true;
}

IsRPName(name[])
{
   new upos=strfind(name, "_");
   if(isnull(name)) return false;
   if(strlen(name)-2<upos<2) return false;
   for(new i = 0; i < 24; i++)
   {
      if(!name[i]) break;
      if(!i && 65 > name[i] > 90) return false;
      if(name[i] == 95 && i!=upos) return false;
      if(upos && i-upos == 1)
      {
         if(65 > name[i] > 90) return false;
      }
      if(65 <= name[i] <= 90)
      {
         if(!(!i || i==upos+1 || (i==2 && upos>5) || (i==upos+3 && strlen(name)-upos>5))) return false;
      }
      if(97 > name[i] > 122) return false;
   }
   if(upos==-1) return false;
   if(strlen(name)-upos<3) return false;
   return true;
}

/*createCenterHUDTextDraw(playerid)
{
	centerHUDInfo[playerid] = TextDrawCreate(319.000000, 380.000000, "");
	TextDrawAlignment(centerHUDInfo[playerid], 2);
	TextDrawBackgroundColor(centerHUDInfo[playerid], 255);
	TextDrawFont(centerHUDInfo[playerid], 1);
	TextDrawLetterSize(centerHUDInfo[playerid], 0.320000, 1.500000);
	TextDrawColor(centerHUDInfo[playerid], -1);
	TextDrawSetOutline(centerHUDInfo[playerid], 0);
	TextDrawSetProportional(centerHUDInfo[playerid], 1);
	TextDrawSetShadow(centerHUDInfo[playerid], 1);
}

displayCenterHUDInfo(playerid, string2[], duration)
{
	if(displayingText[playerid])
	{
		KillTimer(hideCenterHUDTimerID[playerid]);
	}
	TextDrawSetString(centerHUDInfo[playerid], string2);
	TextDrawShowForPlayer(playerid, centerHUDInfo[playerid]);
	hideCenterHUDTimerID[playerid] = SetTimerEx("Timer_hideCenterHUDInfo", duration *1000, 0, "i", playerid);
	displayingText[playerid] = 1;
}

destroyCenterHUDInfo(playerid)
{
	TextDrawDestroy(centerHUDInfo[playerid]);
}*/

SendUnauthorizedMsg(playerid)
{
	return SendClientMessage(playerid, COLOR_RED, "[Access Denied]:{FFFFFF} You aren't authorized to use this.");
}

AdminRank(targetid)
{
	new adminrank[30];
	switch(PlayerData[targetid][pAdminLevel])
	{
		case 0:
		{
			adminrank = "None";
		}
		case 1: 
		{
			adminrank = "Probationary Administrator";
		}
		case 2: 
		{
			adminrank = "Administrator";
		}
		case 3:
		{
			adminrank = "Lead Administrator";
		}
		case 4:
		{
			adminrank = "Management";
		}
	}
	return adminrank;
}

/*ReturnAdminRank(rankid)
{
	new string[30];
	switch(rankid)
	{
		case 0:
		{
			string = "None";
		}
		case 1: 
		{
			string = "Probationary Administrator";
		}
		case 2: 
		{
			string = "Administrator";
		}
		case 3:
		{
			string = "Lead Administrator";
		}
		case 4:
		{
			string = "Management";
		}
	}
	return string;
}*/

stock SendClientMessageEx(playerid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[156]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 156
		#emit PUSH.C string
		#emit PUSH.C args
		#emit SYSREQ.C format

		SendClientMessage(playerid, color, string);

		#emit LCTRL 5
		#emit SCTRL 4
		#emit RETN
	}
	return SendClientMessage(playerid, color, str);
} // Credits to Emmet, South Central Roleplay

stock SendClientMessageToAllEx(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.pri args
		#emit ADD.C 4
		#emit PUSH.pri
		#emit SYSREQ.C format

        #emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) {
			SendClientMessage(i, color, string);
		}
		return true;
	}
	return SendClientMessageToAll(color, str);
} // Credits to Emmet, South Central Roleplay

stock SendNearbyMessage(playerid, Float:radius, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 16); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (IsPlayerNearPlayer(i, playerid, radius)) {
  				SendClientMessage(i, color, string);
			}
		}
		return true;
	}
	foreach (new i : Player)
	{
		if (IsPlayerNearPlayer(i, playerid, radius)) {
			SendClientMessage(i, color, str);
		}
	}
	return true;
} // Credits to Emmet, South Central Roleplay

stock SendAdminMessage(level, const str[])
{
	new newString[128];

	format(newString, sizeof(newString), "AdmWarn: %s", str);

	foreach(new i : Player)
	{
		if(PlayerData[i][pAdminLevel] >= level)
		{
			SendClientMessage(i, COLOR_RED, newString);
		}
	}
	return true;
}

stock SendAdminMessageEx(color, level, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (PlayerData[i][pAdminLevel] >= level) {
  				SendClientMessage(i, color, string);
			}
		}
		return true;
	}
	foreach (new i : Player)
	{
		if (PlayerData[i][pAdminLevel] >= level) {
			SendClientMessage(i, color, str);
		}
	}
	return true;
}

GiveCash(playerid, amount)
{
	PlayerData[playerid][pMoney] += amount;
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, PlayerData[playerid][pMoney]);
	SaveSQLInt(PlayerData[playerid][pSQLID], "players", "Money", PlayerData[playerid][pMoney]);
	return true;
}

CountPlayerHouses(playerid)
{
	new count = 0;
	for(new i = 0; i < MAX_HOUSES; i++)
	{
		if(HouseData[i][HouseID] != 0)
		{
			if(HouseData[i][HouseOwnerSQL] == PlayerData[playerid][pSQLID])
			{
				count++;
			}
		}
	}
	return count;
}