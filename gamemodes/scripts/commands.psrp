/*
	Project Serranilla Roleplay
	This file contains server commands, created by Shady.
*/

// Vehicle Commands:
CMD:engine(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "You must be in a vehicle to use this command.");

    new vehicleid = GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
    if(engine == VEHICLE_PARAMS_OFF) SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
    else SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
    return true;
}

// General Commands:
CMD:acceptdeath(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(Injured[playerid] == 1)
	{
		if (AcceptDeath[playerid] == 1)
		{
			SetPlayerHealth(playerid, 0.0);
			KillTimer(LoseHealthTimer[playerid]);
			SendServerMessage(playerid, "You have accepted death, therefore you'll be transferred to hospital.");
		}
		else if (AcceptDeath[playerid] == 0)
		{
			SendErrorMessage(playerid, "You must wait atleast one minute before accepting death.");
		}
	}
	else if (Injured[playerid] == 0)
	{
		SendErrorMessage(playerid, "You are not injured right now.");
	}
	return true; 
}

CMD:kill(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(!PlayerData[playerid][pAdminLevel]) return SendUnauthorizedMsg(playerid);
	SetPlayerHealth(playerid, 0);
	return true;
}

CMD:enter(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(!IsPlayerInAnyVehicle(playerid))
	{
		for(new i = 0; i < MAX_HOUSES; i++)
		{
			if(HouseData[i][HouseID] != 0)
			{
				if(IsPlayerInRangeOfPoint(playerid, 5.0, HouseData[i][HouseExterior][0], HouseData[i][HouseExterior][1], HouseData[i][HouseExterior][2]))
				{
					if(HouseData[i][HouseLocked] == 0)
					{
						SetPlayerPos(playerid, HouseData[i][HouseInterior][0], HouseData[i][HouseInterior][1], HouseData[i][HouseInterior][2]);
						SetPlayerFacingAngle(playerid, HouseData[i][HouseInterior][3]);
						SetPlayerInterior(playerid, HouseData[i][HouseInteriorID]);
						SetPlayerVirtualWorld(playerid, HouseData[i][HouseID]);
					}
					else return SendErrorMessage(playerid, "This house is locked.");
				}
			}
		}
	}
	return true;
}

CMD:exit(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(!IsPlayerInAnyVehicle(playerid))
	{
		for(new i = 0; i < MAX_HOUSES; i++)
		{
			if(HouseData[i][HouseID] != 0)
			{
				if(GetPlayerVirtualWorld(playerid) == HouseData[i][HouseID])
				{
					if(IsPlayerInRangeOfPoint(playerid, 5.0, HouseData[i][HouseInterior][0], HouseData[i][HouseInterior][1], HouseData[i][HouseInterior][2]))
					{
						SetPlayerPos(playerid, HouseData[i][HouseExterior][0], HouseData[i][HouseExterior][1], HouseData[i][HouseExterior][2]);
						SetPlayerFacingAngle(playerid, HouseData[i][HouseExterior][3]);
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid, 0);
					}
				}
			}
		}
	}
	return true;
}

CMD:commands(playerid, params[]) return cmd_help(playerid, params);
CMD:cmds(playerid, params[]) return cmd_help(playerid, params);
CMD:help(playerid, params[])
{
    new string[512];
    if(!LoggedIn[playerid]) return true;
    format(string, sizeof(string), "/fps, /stats, /skintest, /helpers, /admins, /stopanim, /enter, /exit");
	SendClientMessage(playerid, COLOR_GREY, string);
    format(string, sizeof(string), "/id, /examine, /blindfold, /ame, /report, /reportbug, /serverstats, /l(ow)");
	SendClientMessage(playerid, COLOR_GREY, string);
    format(string, sizeof(string), "/s(hout), /w(hisper), /o(oc), /attempt, /b, /me, /do, /injuries, /credits, /pm");
	SendClientMessage(playerid, COLOR_GREY, string);
	return true;
}

/*CMD:admins(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	SendClientMessage(playerid, COLOR_WHITE, "Administrators Online:");
	foreach(new i: Player)
	{
		if(PlayerData[i][pAdminLevel])
		{
			SendClientMessageEx(playerid, COLOR_GREY, "%s: %s", AdminRank(i), NameRP(i));
		}
		else
		{
			return SendClientMessage(playerid, COLOR_GREY, "There are no administrators' online.");
		}
	}

	return true;
}*/

CMD:admins(playerid,params[])
{
    if(!LoggedIn[playerid]) return true;
	new string[256];
	for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            if(PlayerData[i][pAdminLevel] > 1)
            {
                format(string, sizeof(string), "%s{FFFFFF} - AdminName (%s)", SAdminRank(i), NameRP(i));
            }
			else
			{
				format(string, sizeof(string), "There are no staff members online at the moment.");
			}
        }
	}
    ShowPlayerDialog(playerid, DIALOG_ADMINS, DIALOG_STYLE_LIST, "Staff Team", string, "Close", "");
    return true;
}

CMD:s(playerid, params[]) return cmd_shout(playerid, params);
CMD:shout(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(isnull(params)) return SendUsageMessage(playerid, "/s(hout) [shout message]");

	new string[128];
	format(string, sizeof(string), "%s shouts: %s!", NameRP(playerid), params);
	SendLocalMessageEx(playerid, COLOR_SHOUT, string, 20.0);
	return true;
}

CMD:l(playerid, params[]) return cmd_low(playerid, params);
CMD:low(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(isnull(params)) return SendUsageMessage(playerid, "/l(ow) [low message]");

	new string[128];
	format(string, sizeof(string), "[Quiet] %s says: %s", NameRP(playerid), params);
	SendLocalMessageEx(playerid, COLOR_WHITE, string, 7.6);
	return true;
}

CMD:w(playerid, params[]) return cmd_whisper(playerid, params);
CMD:whisper(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;

	new id, msg[80], string[128];
	if(sscanf(params, "us[80]", id, msg)) return SendUsageMessage(playerid, "/w(hisper) [playerid or name] [whisper message]");
	{
		if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "That player isn't connected.");
		if(!LoggedIn[id]) return SendErrorMessage(playerid, "That player isn't logged in.");

		if(!GetDistanceBetweenPlayers(playerid, id, 3.5)) return SendErrorMessage(playerid, "You must be close to the player in order to whisper them.");
		format(string, sizeof(string), "[Whisper from %s]: %s", NameRP(playerid), msg);
		SendClientMessage(id, COLOR_YELLOW, string);

		format(string, sizeof(string), "[Whisper to %s]: %s", NameRP(id), msg);
		SendClientMessage(playerid, COLOR_YELLOW, string);

		format(string, sizeof(string), "* %s whispers something to %s... *", NameRP(playerid), NameRP(id));
		SendLocalMessage(playerid, COLOR_EMOTE, string);
	}
	return true;
}

CMD:attempt(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(isnull(params)) return SendUsageMessage(playerid, "/attempt [action message]");
	
	new string[128], rand = (0 + random(50));
	
	format(string, sizeof(string), "* %s has attempted to %s and ", NameRP(playerid), params);
	switch(rand)
	{
		case 0 .. 25:
		{
			strins(string, "failed.", strlen(string));
		}
		default:
		{
			strins(string, "succeeded.", strlen(string));
		}
	}

	SendLocalMessage(playerid, COLOR_EMOTE, string);
	return true;
}

CMD:b(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(isnull(params)) return SendUsageMessage(playerid, "/b [local OOC message]");

	new string[128];
	format(string, sizeof(string), "[OOC-L] (( %s [%d]:{FFFFFF} %s {AFAFAF}))", NameRP(playerid), playerid, params);
	SendLocalMessage(playerid, COLOR_GREY, string);
	return true;
}

CMD:o(playerid, params[]) return cmd_ooc(playerid, params);
CMD:ooc(playerid, params[])
{
	new string[128];
	if(!LoggedIn[playerid]) return true;
	if(isnull(params)) return SendUsageMessage(playerid, "/ooc [general OOC message]");

	if(!GeneralOOC[playerid])
	{
		SendErrorMessage(playerid, "This chat is disabled.");
	}
	else
	{
		format(string, sizeof(string), "[OOC-G] (( %s [%d]: %s ))", NameRP(playerid), playerid, params);
		SendClientMessageToAll(COLOR_SANDYBROWN, string);
	}
	return true;
}

CMD:pm(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;

	new id, msg[128], string[128];
	if(sscanf(params, "us[80]", id, msg)) return SendUsageMessage(playerid, "/pm [playerid or name] [message]");
	{
		if(playerid == id) return SendErrorMessage(playerid, "You can't send yourself a private message.");
		if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "That player isn't connected.");
		if(!LoggedIn[id]) return SendErrorMessage(playerid, "That player isn't logged in.");

		format(string, sizeof(string), "(( PM from %s [%d]: %s ))", NameRP(playerid), playerid, msg);
		SendClientMessage(id, COLOR_YELLOW, string);

		format(string, sizeof(string), "(( PM sent to %s [%d]: %s ))", NameRP(id), id, msg);
		SendClientMessage(playerid, COLOR_LIGHTYYELLOW, string);
	}
	return true;
}

CMD:me(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(isnull(params)) return SendUsageMessage(playerid, "/me [action message]");

	new string[128];
	format(string, sizeof(string), "* %s %s", NameRP(playerid), params);
	SendLocalMessage(playerid, COLOR_EMOTE, string);
	return true;
}

CMD:do(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(isnull(params)) return SendUsageMessage(playerid, "/do [action message]");

	new string[128];
	format(string, sizeof(string), "* %s (( %s ))", params, NameRP(playerid));
	SendLocalMessage(playerid, COLOR_EMOTE, string);
	return true;
}

CMD:ame(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	if(isnull(params)) return SendUsageMessage(playerid, "/ame [annotated action message]");

	SetPlayerChatBubble(playerid, params, COLOR_EMOTE, 15.0, 10000);

	new string[128];
	format(string, sizeof(string), "* Annotated message: %s", params);
	SendClientMessage(playerid, COLOR_EMOTE, string);
	return true;
}

CMD:injuries(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	new id;
	if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/injuries [playerid or name]");
	{
		if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "That player isn't connected.");
		if(!LoggedIn[id]) return SendErrorMessage(playerid, "That player isn't logged in.");
		if(!GetDistanceBetweenPlayers(playerid, id, 5.0)) return SendErrorMessage(playerid, "You must be close to the player in order to whisper them.");
		DisplayDamageData(id, playerid);
	}
	return true;
}

CMD:credits(playerid, params[])
{
	new string[230];
	if(!LoggedIn[playerid]) return true;
	strcat(string, "Project Serranilla Roleplay would like to take the time to mention the following members\n");
	strcat(string, "and behalf of that, giving them some credit for their appreciated contribution\n");
	strcat(string, "to our wonderful server.\n\n");
	strcat(string, "{1ABC9C}Shady{FFFFFF} - Owner & Scripter\n");
	ShowPlayerDialog(playerid, DIALOG_CREDITS, DIALOG_STYLE_MSGBOX, "Server Credits", string, "Close", "");
	return true;
}

CMD:id(playerid, params[])
{
    new id, string[128];
	if(!LoggedIn[playerid]) return true;
    if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/id [playerid or name]");
   	{
		if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "That player isn't connected.");
		if(!LoggedIn[id]) return SendErrorMessage(playerid, "That player isn't logged in.");
		
		format(string, sizeof(string), "(ID: %d) %s | Level: %d", id, NameRP(playerid), PlayerData[id][pLevel]);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
    return true;
}

CMD:examine(playerid, params[])
{
	new playerb, string[128];
	if(!LoggedIn[playerid]) return true;
	if(sscanf(params, "u", playerb)) return SendUsageMessage(playerid, "/examine [playerid or name]");
	{
		if(!IsPlayerConnected(playerb)) return SendErrorMessage(playerid, "That player isn't connected.");
		if(!LoggedIn[playerb]) return SendErrorMessage(playerid, "That player isn't logged in.");
		if(!GetDistanceBetweenPlayers(playerid, playerb, 3.5)) return SendErrorMessage(playerid, "You must be close to the player in order to examine them.");

		format(string, sizeof(string), "[EXAMINE]{FFFFFF} %s would appear to be a %s %s who is %d years old.", NameRP(playerb), GetEthnicity(playerb), GetGender(playerb), PlayerData[playerb][pAge]);
		SendClientMessage(playerid, COLOR_MEDIUMSEAGREEN, string);
	}
	return true;
}

// Account Commands:
CMD:stats(playerid, params[])
{
	new playerb;
	if(PlayerData[playerid][pAdminLevel])
	{
		if (sscanf(params, "I(-1)", playerb)) return true;
		if(playerb == -1)
		{
			return ShowStats(playerid, playerid);
		}
		else
		{
			if(!IsPlayerConnected(playerb)) return SendErrorMessage(playerid, "The player you specified isn't connected.");
			if(!LoggedIn[playerid]) return SendErrorMessage(playerid, "The player you specified isn't logged in.");
			ShowStats(playerb, playerid);
		}
	}
	else return ShowStats(playerid, playerid);
	return true;
}

CMD:buylevel(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	new curLevel = PlayerData[playerid][pLevel], curRespect = PlayerData[playerid][pRespect], needed = 0, string[128];

	needed = (curLevel * 5);
	if(curRespect < needed) return SendErrorMessage(playerid, "You do not have enough respect points in order to level up.");
	
	PlayerData[playerid][pLevel] ++;
	PlayerData[playerid][pRespect] -= needed;

	SaveSQLInt(PlayerData[playerid][pSQLID], "players", "Level", PlayerData[playerid][pLevel]);
	SaveSQLInt(PlayerData[playerid][pSQLID], "players", "Respect", PlayerData[playerid][pRespect]);
	SetPlayerScore(playerid, PlayerData[playerid][pLevel]);

	format(string, sizeof(string), "[SUCCESS]:{FFFFFF} You have levelled up to level %d [Respect Points Left: %d]", PlayerData[playerid][pLevel], PlayerData[playerid][pRespect]);
	SendClientMessage(playerid, COLOR_GREEN, string);
	return true;
}

CMD:changepass(playerid, params[]) return cmd_changepassword(playerid, params);
CMD:changepassword(playerid, params[])
{
	if(!LoggedIn[playerid]) return true;
	ShowChangePassDialog(playerid);
    return true;
}

CMD:changeage(playerid, params[])
{
   	new str[128], value;
   	if(!LoggedIn[playerid]) return true;
    if(sscanf(params, "i", value)) return SendUsageMessage(playerid, "/changeage [age]");
	if(value < 18 || value > 61) return SendErrorMessage(playerid, "Age must be above 18 OR below 61.");
	PlayerData[playerid][pAge] = value;
	SaveSQLInt(PlayerData[playerid][pSQLID], "players", "Age", PlayerData[playerid][pAge]);
	format(str, sizeof(str), "[SUCCESS]:{FFFFFF} You've successfully changed your age to %d.", value);
	SendClientMessage(playerid, COLOR_GREEN, str);
	return true;
}

CMD:changesex(playerid, params[])
{
	new str[128], option[10];
    if(!LoggedIn[playerid]) return true;
	if(sscanf(params, "s[10]", option)) return SendUsageMessage(playerid, "/changesex [male or female]");
    if(isnull(params)) return SendErrorMessage(playerid, "Gender must be either Male OR Female.");
	if(!strcmp(option, "male", true))
	{
		if(PlayerData[playerid][pSex] == 1) return SendErrorMessage(playerid, "Your gender is already set to Male.");
        PlayerData[playerid][pSex] = 1;
		SaveSQLInt(PlayerData[playerid][pSQLID], "players", "Gender", PlayerData[playerid][pSex]);
		format(str, sizeof(str), "[SUCCESS]:{FFFFFF} You've successfully changed your gender to Male.");
		SendClientMessage(playerid, COLOR_GREEN, str);
	}
	if(!strcmp(option, "female", true))
	{
		if(PlayerData[playerid][pSex] == 2) return SendErrorMessage(playerid, "Your gender is already set to Female.");
        PlayerData[playerid][pSex] = 2;
		SaveSQLInt(PlayerData[playerid][pSQLID], "players", "Gender", PlayerData[playerid][pSex]);
		format(str, sizeof(str), "[SUCCESS]:{FFFFFF} You've successfully changed your gender to Female.");
		SendClientMessage(playerid, COLOR_GREEN, str);
	}
	else return SendUsageMessage(playerid, "/changesex [male or female]");
	return true;
}

// Administrator Commands:
CMD:ah(playerid, params[]) return cmd_ahelp(playerid, params);
CMD:acmds(playerid, params[]) return cmd_ahelp(playerid, params);
CMD:ahelp(playerid, params[])
{
	if(PlayerData[playerid][pAdminLevel])
	{
	    new dialogstring[256];
	    format(dialogstring, sizeof(dialogstring), "{195080}Probationary Administrator:{FFFFFF} /revive\n{2F84FD}Administrator:{FFFFFF} /gotopoint\n{DA004E}Lead Administrator:{FFFFFF} /motd, /makehitman, /removehitman\nManagement:{FFFFFF} /makeadmin, /makedonator, /maketester, /restart, /ochangepass");
	    ShowPlayerDialog(playerid, DIALOG_AHELP, DIALOG_STYLE_MSGBOX, "Admin Help", dialogstring, "Close", "");
	}
	else SendUnauthorizedMsg(playerid);
	return true;
}

CMD:makeadmin(playerid, params[])
{
   	new str[128], playerb, value;
    if(PlayerData[playerid][pAdminLevel] < 4 && !IsPlayerAdmin(playerid)) return SendUnauthorizedMsg(playerid);
    if(sscanf(params, "ui", playerb, value)) return SendUsageMessage(playerid, "/makeadmin [playerid/part of name] [level 1-4]");
	if(value < 0 || value > 4) return SendErrorMessage(playerid, "Invalid administrator level, 0-4.");
    if(value == 0)
    {
		PlayerData[playerb][pAdminLevel] = value;
		SaveSQLInt(PlayerData[playerb][pSQLID], "players", "AdminLevel", PlayerData[playerb][pAdminLevel]);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You've been kicked from the Administration Team by %s.", NameRP(playerid));
		SendClientMessage(playerb, COLOR_LIGHTRED, str);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You have kicked %s from the Administration Team.", NameRP(playerb));
		SendClientMessage(playerid, COLOR_LIGHTRED, str);
        return true;
	}
	if(value == 1)
	{
		PlayerData[playerb][pAdminLevel] = value;
		SaveSQLInt(PlayerData[playerb][pSQLID], "players", "AdminLevel", PlayerData[playerb][pAdminLevel]);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You've been made a Probationary Administrator (level %i) by %s.", value, NameRP(playerid));
		SendClientMessage(playerb, COLOR_LIGHTRED, str);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You have set %s's admin level to Probationary Administrator.", NameRP(playerb));
		SendClientMessage(playerid, COLOR_LIGHTRED, str);
	}
	if(value == 2)
	{
		PlayerData[playerb][pAdminLevel] = value;
		SaveSQLInt(PlayerData[playerb][pSQLID], "players", "AdminLevel", PlayerData[playerb][pAdminLevel]);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You've been made an Administrator (level %i) by %s.", value, NameRP(playerid));
		SendClientMessage(playerb, COLOR_LIGHTRED, str);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You have set %s's admin level to Administrator.", NameRP(playerb));
		SendClientMessage(playerid, COLOR_LIGHTRED, str);
	}
	if(value == 3)
	{
		PlayerData[playerb][pAdminLevel] = value;
		SaveSQLInt(PlayerData[playerb][pSQLID], "players", "AdminLevel", PlayerData[playerb][pAdminLevel]);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You've been made a Lead Administrator (level %i) by %s.", value, NameRP(playerid));
		SendClientMessage(playerb, COLOR_LIGHTRED, str);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You have set %s's admin level to Lead Administrator.", NameRP(playerb));
		SendClientMessage(playerid, COLOR_LIGHTRED, str);
	}
	if(value == 4)
	{
		PlayerData[playerb][pAdminLevel] = value;
		SaveSQLInt(PlayerData[playerb][pSQLID], "players", "AdminLevel", PlayerData[playerb][pAdminLevel]);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You've been made a Management (level %i) by %s.", value, NameRP(playerid));
		SendClientMessage(playerb, COLOR_LIGHTRED, str);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You have set %s's admin level to Management.", NameRP(playerb));
		SendClientMessage(playerid, COLOR_LIGHTRED, str);
	}
	return true;
}

CMD:makedonator(playerid, params[])
{
   	new str[128], playerb, value;
    if(PlayerData[playerid][pAdminLevel] < 4) return SendUnauthorizedMsg(playerid);
    if(sscanf(params, "ui", playerb, value)) return SendUsageMessage(playerid, "/makedonator [playerid/part of name] [donator level 1-3]");
	if(value < 0 || value > 3) return SendErrorMessage(playerid, "Invalid donator level, 0-3.");
    if(value == 0)
    {
		PlayerData[playerb][pDonator] = value;
		SaveSQLInt(PlayerData[playerb][pSQLID], "players", "Donator", PlayerData[playerb][pDonator]);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} Your donator status has been revoked by %s", NameRP(playerid));
		SendClientMessage(playerb, COLOR_LIGHTRED, str);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You have revoked %s's donator status.", NameRP(playerb));
		SendClientMessage(playerid, COLOR_LIGHTRED, str);
        return true;
	}
	if(value == 1)
	{
		PlayerData[playerb][pDonator] = value;
		SaveSQLInt(PlayerData[playerb][pSQLID], "players", "Donator", PlayerData[playerb][pDonator]);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You've been made a Ruby Donator (level %i) by %s", value, NameRP(playerid));
		SendClientMessage(playerb, COLOR_LIGHTRED, str);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You have set %s's donator status to Ruby Donator.", NameRP(playerb));
		SendClientMessage(playerid, COLOR_LIGHTRED, str);
	}
	if(value == 2)
	{
		PlayerData[playerb][pDonator] = value;
		SaveSQLInt(PlayerData[playerb][pSQLID], "players", "Donator", PlayerData[playerb][pDonator]);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You've been made a Sapphire Donator (level %i) by %s", value, NameRP(playerid));
		SendClientMessage(playerb, COLOR_LIGHTRED, str);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You have set %s's donator status to Sapphire Donator.", NameRP(playerb));
		SendClientMessage(playerid, COLOR_LIGHTRED, str);
	}
	if(value == 3)
	{
		PlayerData[playerb][pDonator] = value;
		SaveSQLInt(PlayerData[playerb][pSQLID], "players", "Donator", PlayerData[playerb][pDonator]);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You've been made a Diamond Donator (level %i) by %s", value, NameRP(playerid));
		SendClientMessage(playerb, COLOR_LIGHTRED, str);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You have set %s's donator status to Diamond Donator.", NameRP(playerb));
		SendClientMessage(playerid, COLOR_LIGHTRED, str);
	}
	return true;
}

CMD:maketester(playerid, params[])
{
   	new str[128], playerb, value;
    if(PlayerData[playerid][pAdminLevel] < 4 && PlayerData[playerid][pTester] < 2) return SendUnauthorizedMsg(playerid);
    if(sscanf(params, "ui", playerb, value)) return SendUsageMessage(playerid, "/maketester [playerid/part of name] [tester level 1-2].");
	if(value < 0 || value > 3) return SendErrorMessage(playerid, "Invalid tester level, 0-2.");
    if(value == 0)
    {
		PlayerData[playerb][pTester] = value;
		SaveSQLInt(PlayerData[playerb][pSQLID], "players", "Tester", PlayerData[playerb][pTester]);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} Your tester status has been revoked by %s", NameRP(playerid));
		SendClientMessage(playerb, COLOR_LIGHTRED, str);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You have revoked %s's tester status.", NameRP(playerb));
		SendClientMessage(playerid, COLOR_LIGHTRED, str);
        return true;
	}
	if(value == 1)
	{
		PlayerData[playerb][pTester] = value;
		SaveSQLInt(PlayerData[playerb][pSQLID], "players", "Tester", PlayerData[playerb][pTester]);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You've been made a Tester (level %i) by %s", value, NameRP(playerid));
		SendClientMessage(playerb, COLOR_LIGHTRED, str);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You have set %s's tester level to Tester.", NameRP(playerb));
		SendClientMessage(playerid, COLOR_LIGHTRED, str);
	}
	if(value == 2)
	{
		if(PlayerData[playerid][pTester] == 2) return SendErrorMessage(playerid, "You are not authorized to set tester's level to 'Lead'.");
		PlayerData[playerb][pTester] = value;
		SaveSQLInt(PlayerData[playerb][pSQLID], "players", "Tester", PlayerData[playerb][pTester]);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You've been made a Lead Tester (level %i) by %s", value, NameRP(playerid));
		SendClientMessage(playerb, COLOR_LIGHTRED, str);
		format(str, sizeof(str), "[SERVER]:{FFFFFF} You have set %s's tester level to Lead Tester.", NameRP(playerb));
		SendClientMessage(playerid, COLOR_LIGHTRED, str);
	}
	return true;
}

CMD:makehitman(playerid, params[])
{
   	new str[128], playerb;
    if(PlayerData[playerid][pAdminLevel] < 3) return SendUnauthorizedMsg(playerid);
    if(sscanf(params, "u", playerb)) return SendUsageMessage(playerid, "/makehitman [playerid/part of name]");
	if(IsAHitman(playerb)) return SendErrorMessage(playerid, "That player is already in the Hitman Agency. To revoke it, use /removehitman.");
	
    PlayerData[playerb][pHitman] = 1;
	format(str, sizeof(str), "[SERVER]:{FFFFFF} You have been hired into the Hitman Agency by %s. Use /hmahelp to see your new commands.", NameRP(playerid));
	SendClientMessage(playerb, COLOR_LIGHTRED, str);
	format(str, sizeof(str), "[SERVER]:{FFFFFF} You have successfully gave Hitman status to %s.", NameRP(playerb));
	SendClientMessage(playerid, COLOR_LIGHTRED, str);
	return true;
}

CMD:removehitman(playerid, params[])
{
   	new str[128], playerb;
    if(PlayerData[playerid][pAdminLevel] < 3) return SendUnauthorizedMsg(playerid);
    if(sscanf(params, "u", playerb)) return SendUsageMessage(playerid, "/removehitman [playerid/part of name]");
	if(!IsAHitman(playerb)) return SendErrorMessage(playerid, "That player is not in the Hitman Agency");
	
    PlayerData[playerb][pHitman] = 0;
	format(str, sizeof(str), "[SERVER]:{FFFFFF} You have been terminated from the Hitman Agency by %s.", NameRP(playerid));
	SendClientMessage(playerb, COLOR_LIGHTRED, str);
	format(str, sizeof(str), "[SERVER]:{FFFFFF} You have successfully removed Hitman status from %s.", NameRP(playerb));
	SendClientMessage(playerid, COLOR_LIGHTRED, str);
	return true;
}

CMD:gotopoint(playerid, params[])
{
	if(PlayerData[playerid][pAdminLevel] < 2) return SendUnauthorizedMsg(playerid);
	new	Float:x, Float:y, Float:z, interior;
	if(sscanf(params, "fffi", x, y, z, interior)) return SendUsageMessage(playerid, "/gotopoint [x] [y] [z] [interior id]");
	SetPlayerPos(playerid, x, y, z);
	SetPlayerInterior(playerid, interior);
	return true;
}

CMD:restart(playerid, params[])
{
	if(PlayerData[playerid][pAdminLevel] < 4) return SendUnauthorizedMsg(playerid);
	SendClientMessageToAll(COLOR_GOLD, "[Announcement]:{FFFFFF} The server will be restarted in 20 seconds.");
	RestartEx();
	return true;
}

CMD:revive(playerid, params[])
{
    new targetid;
	if(!PlayerData[playerid][pAdminLevel]) return SendUnauthorizedMsg(playerid);
    if(sscanf(params, "u", targetid)) return SendUsageMessage(playerid, "/revive [playerid/part of name]");
	if(targetid == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "That player is not online.");
	if(Injured[targetid] == 0) return SendErrorMessage(playerid, "That player is not injured.");
	
	new string[100];
	format(string, sizeof(string), "(ADMIN INFO) {FFFFFF}You have successfully revived %s.", NameRP(targetid));
    SendClientMessage(playerid, COLOR_ADMINFO, string);
	format(string, sizeof(string), "(ADMIN INFO) {FFFFFF}You have been revived by %s %s.", AdminRank(playerid), NameRP(playerid));
    SendClientMessage(targetid, COLOR_ADMINFO, string);
	
	KillTimer(AcceptDeathTimer[targetid]);
	KillTimer(LoseHealthTimer[targetid]);
	AcceptDeath[targetid] = 0;
	Injured[targetid] = 0;
	ClearAnimations(targetid);
	SetPlayerHealth(targetid, 100.0);
    return true;
}

CMD:motd(playerid, params[])
{
	if(PlayerData[playerid][pAdminLevel] < 3) return SendUnauthorizedMsg(playerid);
	if(isnull(params)) return SendUsageMessage(playerid, "/motd [message of the day]");

	new string[267];
	SendServerMessage(playerid, "You have successfully updated the message of the day.");
	format(MOTDText, sizeof MOTDText, "%s", params);
	format(string, sizeof(string), "[Player MOTD]: %s", MOTDText);
	SendClientMessageToAll(COLOR_WHITE, string);
	UpdateMOTD();
	return true;
}

CMD:togooc(playerid, params[])
{
	new string[256];
	if(PlayerData[playerid][pAdminLevel] < 3) return SendUnauthorizedMsg(playerid);
	if(!GeneralOOC[playerid])
    {
		format(string, sizeof(string), "(ADMIN INFO){FFFFFF} %s %s has toggled the General OOC Chat on.", AdminRank(playerid), NameRP(playerid));
        SendClientMessageToAll(COLOR_ADMINFO, string);
        GeneralOOC[playerid] = true;
    }
    else
	{
		format(string, sizeof(string), "(ADMIN INFO){FFFFFF} %s %s has toggled the General OOC Chat off.", AdminRank(playerid), NameRP(playerid));
        SendClientMessageToAll(COLOR_ADMINFO, string);
    	GeneralOOC[playerid] = false;
	}
	return true;
}

CMD:ochangepass(playerid, params[])
{
    new playersname[MAX_PLAYER_NAME], query[128], NewPassword[65];
    if(PlayerData[playerid][pAdminLevel] < 4) return SendUnauthorizedMsg(playerid);
	if(sscanf(params, "s[24]s[65]", playersname, NewPassword))
	{
		SendUsageMessage(playerid, "/ochangepass [full name (case sensitive)] [password]");
		SendServerMessage(playerid, "Make sure to check that the player is not online.");
	}

	mysql_format(sqlConnection, query, sizeof(query), "SELECT `AdminLevel` FROM `players` WHERE `Name` = '%e' LIMIT 1", playersname);
	mysql_pquery(sqlConnection, query, "OnOfflineChangePass", "iss", playerid, playersname, NewPassword);
	return true;
}