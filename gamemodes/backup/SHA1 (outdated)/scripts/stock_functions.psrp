/*
	Project Serranilla Roleplay
	This file contains stock and other functions, created by Shady.
*/

GetName(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	return name;
}

GetIP(playerid)
{
	new ip[20];
	GetPlayerIp(playerid, ip, sizeof(ip));
	return ip;
}

GetPGender(playerid)
{
	new gender[12];
	switch(PlayerData[playerid][pSex])
	{
		case 1:gender = "his";
		case 2:gender = "her";
		default:gender = "their";
	}
	return gender;
}

GetDate()
{
	new sendString[90], MonthStr[40], month, day, year;
	new hour, minute, second;

	gettime(hour, minute, second);
	getdate(year, month, day);
	switch(month)
	{
	    case 1:  MonthStr = "January";
	    case 2:  MonthStr = "February";
	    case 3:  MonthStr = "March";
	    case 4:  MonthStr = "April";
	    case 5:  MonthStr = "May";
	    case 6:  MonthStr = "June";
	    case 7:  MonthStr = "July";
	    case 8:  MonthStr = "August";
	    case 9:  MonthStr = "September";
	    case 10: MonthStr = "October";
	    case 11: MonthStr = "November";
	    case 12: MonthStr = "December";
	}

	format(sendString, 90, "%s %d, %d %02d:%02d:%02d", MonthStr, day, year, hour, minute, second);
	return sendString;
}

NameRP(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	for(new i = 0; i < strlen(name); i++)
	{
		if(name[i] == '_')
		{
			name[i] = ' ';
		}
	}
	return name;
}

strmatch(const String1[], const String2[])
{
    if ((strcmp(String1, String2, true, strlen(String2)) == 0) && (strlen(String2) == strlen(String1)))
    {
        return true;
    }
    else
    {
        return false;
    }
}

ShowLoginScreenTextDraw(playerid, bool:showTextdraw = true)
{
	if(showTextdraw)
	{
		for(new i = 0; i < 3; i++)
		{
			PlayerTextDrawShow(playerid, LoginScreen[playerid][i]);
		}
	}
	return true;
}

HideLoginScreenTextDraw(playerid)
{
	for(new i = 0; i < 3; i++)
		{
			PlayerTextDrawHide(playerid, LoginScreen[playerid][i]);
		}
	return true;
}

displayWelcomeMessage(playerid)
{
	for(new i; i < 9; i++)
	{
		TextDrawShowForPlayer(playerid, TDEditor_TD[i]);
	}
	return true;
}

KickEx(playerid)
{
	SetTimerEx("KickPlayer", 1000, false, "i", playerid);
	return true;
}

RestartEx()
{
	SetTimer("ServerRestart", 20000, false);
}

IsRPName(name[])
{
   new upos=strfind(name, "_");
   if(isnull(name)) return false;
   if(strlen(name)-2<upos<2) return false;
   for(new i = 0; i < 24; i++)
   {
      if(!name[i]) break;
      if(!i && 65 > name[i] > 90) return false;
      if(name[i] == 95 && i!=upos) return false;
      if(upos && i-upos == 1)
      {
         if(65 > name[i] > 90) return false;
      }
      if(65 <= name[i] <= 90)
      {
         if(!(!i || i==upos+1 || (i==2 && upos>5) || (i==upos+3 && strlen(name)-upos>5))) return false;
      }
      if(97 > name[i] > 122) return false;
   }
   if(upos==-1) return false;
   if(strlen(name)-upos<3) return false;
   return true;
}

SendUnauthorizedMsg(playerid)
{
	return SendErrorMessage(playerid, "You aren't authorized to use this command.");
}

Ethnicity(targetid)
{
	new ethnicity[30];
	switch(PlayerData[targetid][pEthnicity])
	{
		case 0:
		{
			ethnicity = "White";
		}
		case 1: 
		{
			ethnicity = "Black";
		}
		case 2: 
		{
			ethnicity = "Asian";
		}
		case 3:
		{
			ethnicity = "Hispanic";
		}
	}
	return ethnicity;
}

SAdminRank(targetid)
{
	new adminrank[50];
	switch(PlayerData[targetid][pAdminLevel])
	{
		case 0:
		{
			adminrank = "None";
		}
		case 1: 
		{
			adminrank = "{11806a}Probationary Administrator";
		}
		case 2: 
		{
			adminrank = "{206694}Administrator";
		}
		case 3:
		{
			adminrank = "{3498db}Lead Administrator";
		}
		case 4:
		{
			adminrank = "{e74c3c}Management";
		}
	}
	return adminrank;
}

IsAHitman(playerid)
{
	if(PlayerData[playerid][pHitman] > 0) return true;
	return false;
}

AdminRank(targetid)
{
	new adminrank[30];
	switch(PlayerData[targetid][pAdminLevel])
	{
		case 0:
		{
			adminrank = "None";
		}
		case 1: 
		{
			adminrank = "Probationary Administrator";
		}
		case 2: 
		{
			adminrank = "Administrator";
		}
		case 3:
		{
			adminrank = "Lead Administrator";
		}
		case 4:
		{
			adminrank = "Management";
		}
	}
	return adminrank;
}

/*ReturnAdminRank(rankid)
{
	new string[30];
	switch(rankid)
	{
		case 0:
		{
			string = "None";
		}
		case 1: 
		{
			string = "Probationary Administrator";
		}
		case 2: 
		{
			string = "Administrator";
		}
		case 3:
		{
			string = "Lead Administrator";
		}
		case 4:
		{
			string = "Management";
		}
	}
	return string;
}*/

stock SendClientMessageEx(playerid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[156]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 156
		#emit PUSH.C string
		#emit PUSH.C args
		#emit SYSREQ.C format

		SendClientMessage(playerid, color, string);

		#emit LCTRL 5
		#emit SCTRL 4
		#emit RETN
	}
	return SendClientMessage(playerid, color, str);
} // Credits to Emmet, South Central Roleplay

stock SendClientMessageToAllEx(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.pri args
		#emit ADD.C 4
		#emit PUSH.pri
		#emit SYSREQ.C format

        #emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) {
			SendClientMessage(i, color, string);
		}
		return true;
	}
	return SendClientMessageToAll(color, str);
} // Credits to Emmet, South Central Roleplay

stock SendNearbyMessage(playerid, Float:radius, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 16); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (IsPlayerNearPlayer(i, playerid, radius)) {
  				SendClientMessage(i, color, string);
			}
		}
		return true;
	}
	foreach (new i : Player)
	{
		if (IsPlayerNearPlayer(i, playerid, radius)) {
			SendClientMessage(i, color, str);
		}
	}
	return true;
} // Credits to Emmet, South Central Roleplay

stock SendAdminMessage(level, const str[])
{
	new newString[128];

	format(newString, sizeof(newString), "AdmWarn: %s", str);

	foreach(new i : Player)
	{
		if(PlayerData[i][pAdminLevel] >= level)
		{
			SendClientMessage(i, COLOR_RED, newString);
		}
	}
	return true;
}

stock SendAdminMessageEx(color, level, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (PlayerData[i][pAdminLevel] >= level) {
  				SendClientMessage(i, color, string);
			}
		}
		return true;
	}
	foreach (new i : Player)
	{
		if (PlayerData[i][pAdminLevel] >= level) {
			SendClientMessage(i, color, str);
		}
	}
	return true;
}

GiveCash(playerid, amount)
{
	PlayerData[playerid][pMoney] += amount;
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, PlayerData[playerid][pMoney]);
	SaveSQLInt(PlayerData[playerid][pSQLID], "players", "Money", PlayerData[playerid][pMoney]);
	return true;
}

CountPlayerHouses(playerid)
{
	new count = 0;
	for(new i = 0; i < MAX_HOUSES; i++)
	{
		if(HouseData[i][HouseID] != 0)
		{
			if(HouseData[i][HouseOwnerSQL] == PlayerData[playerid][pSQLID])
			{
				count++;
			}
		}
	}
	return count;
}

GetNearestHouseID(playerid, Float:range = 5.0)
{
	new id = -1;
	for(new i = 0; i < MAX_HOUSES; i++)
	{
		if(HouseData[i][HouseID] != 0)
		{
			if(IsPlayerInRangeOfPoint(playerid, range, HouseData[i][HouseExterior][0], HouseData[i][HouseExterior][1], HouseData[i][HouseExterior][2]))
			{
				id = 1;
				break;
			}
		}
	}
	return id;
}

LoadMOTD()
{ 
    if(!fexist("motd.cfg"))
    {
        dini_Create("motd.cfg");
 
        format(MOTDText, 256, "Welcome to Project Serranilla Roleplay! MOTD hasn't been adjusted yet.");
 
        dini_Set("motd.cfg", "SMOTDUpdate", MOTDText);
    }
    else
    {
        format(MOTDText, 256, "%s", dini_Get("motd.cfg", "SMOTDUpdate"));
    }
 
    printf("PSRP Local: MOTD - %s", MOTDText);
    return 1;
}

UpdateMOTD()
{
    dini_Set("motd.cfg", "SMOTDUpdate", MOTDText);
    return 1;
}